{"version":3,"file":"meeussunmoon-es.min.js","sources":["../src/auxMath.js","../src/timeConversions.js","../src/constants.js","../src/sunTimes.js","../src/moonPhases.js","../src/index.js"],"sourcesContent":["/**\n * Converts angles in degrees to radians.\n * @param {number} deg Angle in degrees.\n * @returns {number} Angle in radians.\n */\nconst deg2rad = (deg) => deg * 0.017453292519943295;\n\n/**\n * Converts angles in radians to degrees.\n * @param {number} rad Angle in radians.\n * @returns {number} Angle in degrees.\n */\nconst rad2deg = (rad) => rad * 57.29577951308232;\n\n/**\n * Calculates the sine of an angle given in degrees.\n * @param {number} deg Angle in degrees.\n * @returns {number} Sine of the angle.\n */\nconst sind = (deg) => Math.sin(deg2rad(deg));\n\n/**\n * Calculates the cosine of an angle given in degrees.\n * @param {number} deg Angle in degrees.\n * @returns {number} Cosine of the angle.\n */\nconst cosd = (deg) => Math.cos(deg2rad(deg));\n\n/**\n * Reduces an angle to the interval 0-360°.\n * @param {number} angle Angle in degrees.\n * @returns {number} Reduced angle in degrees.\n */\nconst reduceAngle = (angle) => angle - (360 * Math.floor(angle / 360));\n\n/**\n * Evaluates a polynomial in the form A + Bx + Cx^2...\n * @param {number} variable Value of x in the polynomial.\n * @param {array} coeffs Array of coefficients [A, B, C...].\n * @returns {number} Sum of the polynomial.\n */\nconst polynomial = (variable, coeffs) => {\n    let varPower = 1;\n    let sum = 0.0;\n    const numCoeffs = coeffs.length;\n    for (let i = 0; i < numCoeffs; i++) {\n        sum += varPower * coeffs[i];\n        varPower *= variable;\n    }\n    return sum;\n};\n\n/**\n * Interpolates a value from 3 known values (see AA p24 Eq3.3).\n * @param {number} y1 Start value of the interval.\n * @param {number} y2 Middle value of the interval.\n * @param {number} y3 End value of the interval.\n * @param {number} n Location (-0.5 >= n >= 0.5) of result in the interval.\n * @param {boolean} normalize Whether the final result should be normalized.\n * @returns {number} Interpolated result.\n */\nconst interpolateFromThree = (y1, y2, y3, n, normalize = false) => {\n    let a = y2 - y1;\n    let b = y3 - y2;\n    if (typeof normalize !== 'undefined' && normalize) {\n        if (a < 0) {\n            a += 360;\n        }\n        if (b < 0) {\n            b += 360;\n        }\n    }\n    const c = b - a;\n    return y2 + (n / 2) * (a + b + n * c);\n};\n\nexport { deg2rad, rad2deg, sind, cosd, reduceAngle, polynomial, interpolateFromThree };\n","import * as luxon from 'luxon';\nimport { polynomial } from './auxMath';\n\n/**\n * Converts a datetime in UTC to the corresponding Julian Date (see AA p60f).\n * @param {DateTime} datetime Datetime to be converted.\n * @returns {number} Julian date (fractional number of days since 1 January\n *     4713BC according to the proleptic Julian calendar.\n */\nconst datetimeToJD = (datetime) => {\n    let Y = datetime.year;\n    let M = datetime.month;\n    const D = datetime.day + (datetime.hour + (datetime.minute + datetime.second / 60) / 60) / 24;\n    if (M < 3) {\n        Y -= 1;\n        M += 12;\n    }\n    const A = Math.floor(Y / 100);\n    // Need a different B if we are before introduction of the Gregorian Calendar\n    const gregorianCutoff = luxon.DateTime.fromISO('1582-10-15T12:00:00Z', { zone: 'UTC' });\n    let B = 0;\n    if (datetime > gregorianCutoff) {\n        B = 2 - A + Math.floor(A / 4);\n    }\n    return Math.floor(365.25 * (Y + 4716)) + Math.floor(30.6001 * (M + 1)) + D + B - 1524.5;\n};\n\n/**\n * Converts a Julian Date to the corresponding datetime in UTC (see AA p63).\n * @param {number} JD Julian date to be converted\n * @returns {DateTime} Datetime corresponding to the given Julian date.\n */\nconst JDToDatetime = (JD) => {\n    JD += 0.5;\n    const Z = Math.floor(JD);\n    const F = JD - Z;\n    let A = Z;\n    if (Z >= 2299161) {\n        const alpha = Math.floor((Z - 1867216.25) / 36524.25);\n        A += 1 + alpha - Math.floor(alpha / 4);\n    }\n    const B = A + 1524;\n    const C = Math.floor((B - 122.1) / 365.25);\n    const D = Math.floor(365.25 * C);\n    const E = Math.floor((B - D) / 30.6001);\n    const fracDay = B - D - Math.floor(30.6001 * E) + F;\n    const day = Math.floor(fracDay);\n    const hour = Math.floor((fracDay - day) * 24);\n    const minute = Math.floor(((fracDay - day) * 24 - hour) * 60);\n    const second = Math.floor((((fracDay - day) * 24 - hour) * 60 - minute) * 60);\n    let month = E - 1;\n    if (E > 13) {\n        month -= 12;\n    }\n    let year = C - 4715;\n    if (month > 2) {\n        year -= 1;\n    }\n    return luxon.DateTime.fromISO('2000-01-01T12:00:00Z', { zone: 'UTC' })\n        // eslint-disable-next-line sort-keys\n        .set({ year, month, day, hour, minute, second });\n};\n\n/**\n * Converts a Julian date to the number of Julian centuries since\n * 2000-01-01T12:00:00Z (see AA p87 Eq12.1).\n * @param {number} JD Julian date.\n * @returns {number} T.\n */\nconst JDToT = (JD) => (JD - 2451545) / 36525;\n\n/**\n * Converts a datetime in UTC to the number of Julian centuries since\n * 2000-01-01T12:00:00Z.\n * @param {DateTime} datetime Datetime to be converted.\n * @returns {number} T.\n */\nconst datetimeToT = (datetime) => JDToT(datetimeToJD(datetime));\n\n/* eslint-disable complexity */\n/**\n * Calculates the value of ΔT=TT−UT (see\n * http://eclipse.gsfc.nasa.gov/SEcat5/deltatpoly.html).\n * @param {DateTime} datetime Datetime for which ΔT should be calculated.\n * @returns {number} ΔT.\n */\nconst DeltaT = (datetime) => {\n    let y = datetime.year;\n    // Months are zero-indexed\n    y += (datetime.month - 0.5) / 12;\n    let u;\n    let t;\n    switch (true) {\n        case y < -1999 || y > 3000:\n            throw 'DeltaT can only be calculated between 1999 BCE and 3000 CE';\n        case y < -500:\n            u = (y - 1820) / 100;\n            return -20 + 32 * u ** 2;\n        case y < 500:\n            u = y / 100;\n            return polynomial(u, [10583.6, -1014.41, 33.78311, -5.952053, -0.1798452, 0.022174192, 0.0090316521]);\n        case y < 1600:\n            u = (y - 1000) / 100;\n            return polynomial(u, [1574.2, -556.01, 71.23472, 0.319781, -0.8503463, -0.005050998, 0.0083572073]);\n        case y < 1700:\n            t = y - 1600;\n            return polynomial(t, [120, -0.9808, -0.01532, 1 / 7129]);\n        case y < 1800:\n            t = y - 1700;\n            return polynomial(t, [8.83, 0.1603, -0.0059285, 0.00013336, -1 / 1174000]);\n        case y < 1860:\n            t = y - 1800;\n            return polynomial(t,\n                [13.72, -0.332447, 0.0068612, 0.0041116, -0.00037436, 0.0000121272, -0.0000001699, 0.000000000875]);\n        case y < 1900:\n            t = y - 1860;\n            return polynomial(t, [7.62, 0.5737, -0.251754, 0.01680668, -0.0004473624, 1 / 233174]);\n        case y < 1920:\n            t = y - 1900;\n            return polynomial(t, [-2.79, 1.494119, -0.0598939, 0.0061966, -0.000197]);\n        case y < 1941:\n            t = y - 1920;\n            return polynomial(t, [21.20, 0.84493, -0.076100, 0.0020936]);\n        case y < 1961:\n            t = y - 1950;\n            return polynomial(t, [29.07, 0.407, -1 / 233, 1 / 2547]);\n        case y < 1986:\n            t = y - 1975;\n            return polynomial(t, [45.45, 1.067, -1 / 260, -1 / 718]);\n        case y < 2005:\n            t = y - 2000;\n            return polynomial(t, [63.86, 0.3345, -0.060374, 0.0017275, 0.000651814, 0.00002373599]);\n        case y < 2050:\n            t = y - 2000;\n            return polynomial(t, [62.92, 0.32217, 0.005589]);\n        case y < 2150:\n            return -20 + 32 * ((y - 1820) / 100) ** 2 - 0.5628 * (2150 - y);\n        default:\n            u = (y - 1820) / 100;\n            return -20 + 32 * u ** 2;\n    }\n};\n/* eslint-enable complexity */\n\n/**\n * Calculates an approximate value for k (the fractional number of new moons\n * since 2000-01-06).\n * @param {DateTime} datetime Datetime for which k is calculated.\n * @returns {number} k.\n */\nconst approxK = (datetime) => {\n    const year = datetime.year + (datetime.month) / 12 +\n        datetime.day / 365.25;\n    return (year - 2000) * 12.3685;\n};\n\n/**\n * Calculates T from k.\n * @param {number} k Fractional number of new moons since 2000-01-06.\n * @returns {number} T Fractional num. of centuries since 2000-01-01:12:00:00Z.\n */\nconst kToT = (k) => k / 1236.85;\n\nexport { datetimeToJD, JDToDatetime, JDToT, datetimeToT, DeltaT, approxK, kToT };\n","/** See AA p144 */\nconst sunMeanAnomaly = [357.52772, 35999.050340, -0.0001603, -1 / 300000];\n\n/** See AA p163 Eq 25.2 */\nconst sunMeanLongitude = [280.46646, 36000.76983, 0.0003032];\n\n/** See AA p147 Eq22.3 */\nconst meanObliquityOfEcliptic =\n    [84381.448 / 3600, -4680.93 / 3600, -1.55 / 3600, 1999.25 / 3600, -51.38 / 3600, -249.67 / 3600, -39.05 / 3600,\n        7.12 / 3600, 27.87 / 3600, 5.79 / 3600, 2.45 / 3600];\n\n/** See AA p144 */\nconst moonArgumentOfLatitude =\n    [93.27191, 483202.017538, -0.0036825, 1 / 327270];\n\n/** See AA p144 */\nconst moonAscendingNodeLongitude = [125.04452, -1934.136261, 0.0020708, 1 / 450000];\n\n/** See AA p144 */\nconst moonMeanAnomaly = [134.96298, 477198.867398, 0.0086972, 1 / 56250];\n\n/** See AA p144 */\nconst moonMeanElongation = [297.85036, 445267.111480, -0.0019142, 1 / 189474];\n\n/* eslint-disable no-multi-spaces, array-bracket-spacing */\n/**\n * Nutations in longitude and obliquity\n * See AA p145f\n */\nconst nutations =\n    [\n        [ 0,  0,  0,  0, 1, -171996, -174.2, 92025,  8.9],\n        [-2,  0,  0,  2, 2,  -13187,   -1.6,  5736, -3.1],\n        [ 0,  0,  0,  2, 2,   -2274,   -0.2,   977, -0.5],\n        [ 0,  0,  0,  0, 2,    2062,    0.2,  -895,  0.5],\n        [ 0,  1,  0,  0, 0,    1426,   -3.4,    54, -0.1],\n        [ 0,  0,  1,  0, 0,     712,    0.1,    -7,    0],\n        [-2,  1,  0,  2, 2,    -517,    1.2,   224, -0.6],\n        [ 0,  0,  0,  2, 1,    -386,   -0.4,   200,    0],\n        [ 0,  0,  1,  2, 2,    -301,      0,   129, -0.1],\n        [-2, -1,  0,  2, 2,     217,   -0.5,   -95,  0.3],\n        [-2,  0,  1,  0, 0,    -158,      0,     0,    0],\n        [-2,  0,  0,  2, 1,     129,    0.1,   -70,    0],\n        [ 0,  0, -1,  2, 2,     123,      0,   -53,    0],\n        [ 2,  0,  0,  0, 0,      63,      0,     0,    0],\n        [ 0,  0,  1,  0, 1,      63,    0.1,   -33,    0],\n        [ 2,  0, -1,  2, 2,     -59,      0,    26,    0],\n        [ 0,  0, -1,  0, 1,     -58,   -0.1,    32,    0],\n        [ 0,  0,  1,  2, 1,     -51,      0,    27,    0],\n        [-2,  0,  2,  0, 0,      48,      0,     0,    0],\n        [ 0,  0, -2,  2, 1,      46,      0,   -24,    0],\n        [ 2,  0,  0,  2, 2,     -38,      0,    16,    0],\n        [ 0,  0,  2,  2, 2,     -31,      0,    13,    0],\n        [ 0,  0,  2,  0, 0,      29,      0,     0,    0],\n        [-2,  0,  1,  2, 2,      29,      0,   -12,    0],\n        [ 0,  0,  0,  2, 0,      26,      0,     0,    0],\n        [-2,  0,  0,  2, 0,     -22,      0,     0,    0],\n        [ 0,  0, -1,  2, 1,      21,      0,   -10,    0],\n        [ 0,  2,  0,  0, 0,      17,   -0.1,     0,    0],\n        [ 2,  0, -1,  0, 1,      16,      0,    -8,    0],\n        [-2,  2,  0,  2, 2,     -16,    0.1,     7,    0],\n        [ 0,  1,  0,  0, 1,     -15,      0,     9,    0],\n        [-2,  0,  1,  0, 1,     -13,      0,     7,    0],\n        [ 0, -1,  0,  0, 1,     -12,      0,     6,    0],\n        [ 0,  0,  2, -2, 0,      11,      0,     0,    0],\n        [ 2,  0, -1,  2, 1,     -10,      0,     5,    0],\n        [ 2,  0,  1,  2, 2,     -8,       0,     3,    0],\n        [ 0,  1,  0,  2, 2,      7,       0,    -3,    0],\n        [-2,  1,  1,  0, 0,     -7,       0,     0,    0],\n        [ 0, -1,  0,  2, 2,     -7,       0,     3,    0],\n        [ 2,  0,  0,  2, 1,     -7,       0,     3,    0],\n        [ 2,  0,  1,  0, 0,      6,       0,     0,    0],\n        [-2,  0,  2,  2, 2,      6,       0,    -3,    0],\n        [-2,  0,  1,  2, 1,      6,       0,    -3,    0],\n        [ 2,  0, -2,  0, 1,     -6,       0,     3,    0],\n        [ 2,  0,  0,  0, 1,     -6,       0,     3,    0],\n        [ 0, -1,  1,  0, 0,      5,       0,     0,    0],\n        [-2, -1,  0,  2, 1,     -5,       0,     3,    0],\n        [-2,  0,  0,  0, 1,     -5,       0,     3,    0],\n        [ 0,  0,  2,  2, 1,     -5,       0,     3,    0],\n        [-2,  0,  2,  0, 1,      4,       0,     0,    0],\n        [-2,  1,  0,  2, 1,      4,       0,     0,    0],\n        [ 0,  0,  1, -2, 0,      4,       0,     0,    0],\n        [-1,  0,  1,  0, 0,     -4,       0,     0,    0],\n        [-2,  1,  0,  0, 0,     -4,       0,     0,    0],\n        [ 1,  0,  0,  0, 0,     -4,       0,     0,    0],\n        [ 0,  0,  1,  2, 0,      3,       0,     0,    0],\n        [ 0,  0, -2,  2, 2,     -3,       0,     0,    0],\n        [-1, -1,  1,  0, 0,     -3,       0,     0,    0],\n        [ 0,  1,  1,  0, 0,     -3,       0,     0,    0],\n        [ 0, -1,  1,  2, 2,     -3,       0,     0,    0],\n        [ 2, -1, -1,  2, 2,     -3,       0,     0,    0],\n        [ 0,  0,  3,  2, 2,      3,       0,     0,    0],\n        [ 2, -1,  0,  2, 2,     -3,       0,     0,    0],\n    ];\n/* eslint-enable no-multi-spaces, array-bracket-spacing */\n\nexport { sunMeanAnomaly, sunMeanLongitude, meanObliquityOfEcliptic, moonArgumentOfLatitude, moonAscendingNodeLongitude,\n    moonMeanAnomaly, moonMeanElongation, nutations };\n","import * as constants from './constants';\nimport { DeltaT, datetimeToT } from './timeConversions';\nimport { cosd, interpolateFromThree, polynomial, rad2deg, reduceAngle, sind } from './auxMath';\nimport { returnTimeForNoEventCase, roundToNearestMinute } from './index';\n\n/**\n * Calculates the solar transit time on a date at a given longitude (see AA\n * p102f).\n * @param {DateTime} datetime Date for which transit is calculated.\n * @param {number} L Longitude.\n * @returns {DateTime} Solar transit time.\n */\nconst sunTransit = (datetime, L) => {\n    const timezone = datetime.zone;\n    let transit = datetime.set({ hour: 0, minute: 0, second: 0 }).setZone('UTC', { keepLocalTime: true });\n    const deltaT = DeltaT(transit);\n    const T = datetimeToT(transit);\n    const Theta0 = apparentSiderealTimeGreenwich(T);\n    // Want 0h TD for this, not UT\n    const TD = T - (deltaT / (3600 * 24 * 36525));\n    const alpha = sunApparentRightAscension(TD);\n    // Sign flip for longitude from AA as we take East as positive\n    let m = (alpha - L - Theta0) / 360;\n    m = normalizeM(m, datetime.offset);\n    const DeltaM = sunTransitCorrection(T, Theta0, deltaT, L, m);\n    m += DeltaM;\n    transit = transit.plus({ seconds: Math.floor(m * 3600 * 24 + 0.5) });\n    if (roundToNearestMinute) {\n        transit = transit.plus({ seconds: 30 }).set({ second: 0 });\n    }\n    return transit.setZone(timezone);\n};\n\n/**\n * Calculates the sunrise or sunset time on a date at a given latitude and\n * longitude (see AA p102f).\n * @param {DateTime} datetime Date for which sunrise or sunset is calculated.\n * @param {number} phi Latitude.\n * @param {number} L Longitude.\n * @param {string} flag 'RISE' or 'SET' depending on which event should be\n *     calculated.\n * @param {number} offset number of degrees below the horizon for the desired\n *     event (50/60 for sunrise/set, 6 for civil, 12 for nautical, 18 for\n *     astronomical dawn/dusk.\n * @returns {DateTime} Sunrise or sunset time.\n */\n// eslint-disable-next-line complexity,require-jsdoc\nconst sunRiseSet = (datetime, phi, L, flag, offset = 50 / 60) => {\n    const timezone = datetime.zone;\n    let suntime = datetime.set({ hour: 0, minute: 0, second: 0 }).setZone('UTC', { keepLocalTime: true });\n    const deltaT = DeltaT(suntime);\n    const T = datetimeToT(suntime);\n    const Theta0 = apparentSiderealTimeGreenwich(T);\n    // Want 0h TD for this, not UT\n    const TD = T - (deltaT / (3600 * 24 * 36525));\n    const alpha = sunApparentRightAscension(TD);\n    const delta = sunApparentDeclination(TD);\n    const H0 = approxLocalHourAngle(phi, delta, offset);\n    // Sign flip for longitude from AA as we take East as positive\n    let m0 = (alpha - L - Theta0) / 360;\n    m0 = normalizeM(m0, datetime.offset);\n    let m;\n    if (flag === 'RISE') {\n        m = m0 - H0 / 360;\n    } else if (flag === 'SET') {\n        m = m0 + H0 / 360;\n    } else {\n        return false;\n    }\n    let counter = 0;\n    let DeltaM = 1;\n    // Repeat if correction is larger than ~9s\n    while ((Math.abs(DeltaM) > 0.0001) && (counter < 3)) {\n        DeltaM = sunRiseSetCorrection(T, Theta0, deltaT, phi, L, m, offset);\n        m += DeltaM;\n        counter++;\n    }\n    if (m > 0) {\n        suntime = suntime.plus({ seconds: Math.floor(m * 3600 * 24 + 0.5) });\n    } else {\n        suntime = suntime.minus({ seconds: Math.floor(m * 3600 * 24 + 0.5) });\n    }\n    if (roundToNearestMinute) {\n        suntime = suntime.plus({ seconds: 30 }).set({ second: 0 });\n    }\n    return suntime.setZone(timezone);\n};\n\n/**\n * Returns a fixed time as given by the hour parameter, an hour later during DST) if the\n * specified event does not occur on the date and returnTimeForNoEventCase is true. If\n * false, return whether the reason for no event is the sun being too high ('SUN_HIGH')\n * or too low ('SUN_LOW').\n * @param {DateTime} date The original date from which the event was calculated.\n * @param {string|undefined} errorCode The error code in case no event was found\n * @param {int} hour Hour to which the returned datetime should be set.\n * @param {int} minute Minute to which the returned datetime should be set.\n * @returns {(DateTime|string)} Time given by parameter 'hour' (+ correction for\n *     DST if applicable) or a string indicating why there was no event ('SUN_HIGH'\n *     or 'SUN_LOW')\n */\nconst handleNoEventCase = (date, errorCode, hour, minute = 0) => {\n    if (returnTimeForNoEventCase) {\n        const returnDate = date.set({ hour, minute, second: 0 }).plus({ minutes: date.isInDST ? 60 : 0 });\n        if (errorCode) {\n            returnDate.errorCode = errorCode;\n        }\n        return returnDate;\n    }\n    return errorCode;\n};\n\n/**\n * Calculates the approximate local hour angle of the sun at sunrise or sunset.\n * @param {number} phi Latitude (see AA p102 Eq15.1).\n * @param {number} delta Apparent declination of the sun.\n * @param {number} offset number of degrees below the horizon for the desired\n *     event (50/60 for sunrise/set, 6 for civil, 12 for nautical, 18 for\n *     astronomical dawn/dusk.\n * @returns {number} Approximate local hour angle.\n */\nconst approxLocalHourAngle = (phi, delta, offset) => {\n    const cosH0 = (sind(-offset) -\n        sind(phi) * sind(delta)) /\n        (cosd(phi) * cosd(delta));\n    if (cosH0 < -1) {\n        throw noEventCodes.SUN_HIGH;\n    } else if (cosH0 > 1) {\n        throw noEventCodes.SUN_LOW;\n    }\n    return rad2deg(Math.acos(cosH0));\n};\n\n/**\n * Normalizes a fractional time of day to be on the correct date.\n * @param {number} m Fractional time of day\n * @param {int} utcOffset Offset in minutes from UTC.\n * @returns {number} m Normalized m.\n */\nconst normalizeM = (m, utcOffset) => {\n    const localM = m + utcOffset / 1440;\n    if (localM < 0) {\n        return m + 1;\n    } else if (localM > 1) {\n        return m - 1;\n    }\n    return m;\n};\n\n/**\n * Calculates the correction for the solar transit time (see AA p103).\n * @param {number} T Fractional number of Julian centuries since\n *     2000-01-01T12:00:00Z.\n * @param {number} Theta0 Apparent sidereal time at Greenwich.\n * @param {number} deltaT ΔT = TT − UT.\n * @param {number} L Longitude.\n * @param {number} m Fractional time of day of the event.\n * @returns {number} Currection for the solar transit time.\n */\nconst sunTransitCorrection = (T, Theta0, deltaT, L, m) => {\n    const theta0 = Theta0 + 360.985647 * m;\n    const n = m + deltaT / 864000;\n    const alpha = interpolatedRa(T, n);\n    const H = localHourAngle(theta0, L, alpha);\n    return -H / 360;\n};\n\n/**\n * Calculates the correction for the sunrise/sunset time (see AA p103).\n * @param {number} T Fractional number of Julian centuries since\n *     2000-01-01T12:00:00Z.\n * @param {number} Theta0 Apparent sidereal time at Greenwich.\n * @param {number} deltaT ΔT = TT − UT.\n * @param {number} phi Latitude.\n * @param {number} L Longitude.\n * @param {number} m Fractional time of day of the event.\n * @param {number} offset number of degrees below the horizon for the desired\n *     event (50/60 for sunrise/set, 6 for civil, 12 for nautical, 18 for\n *     astronomical dawn/dusk.\n * @returns {number} Currection for the sunrise/sunset time.\n */\nconst sunRiseSetCorrection = (T, Theta0, deltaT, phi, L, m, offset) => {\n    const theta0 = Theta0 + 360.985647 * m;\n    const n = m + deltaT / 864000;\n    const alpha = interpolatedRa(T, n);\n    const delta = interpolatedDec(T, n);\n    const H = localHourAngle(theta0, L, alpha);\n    const h = altitude(phi, delta, H);\n    return (h + offset) / (360 * cosd(delta) * cosd(phi) * sind(H));\n};\n\n/**\n * Calculates the local hour angle of the sun (see AA p103).\n * @param {number} theta0 Sidereal time at Greenwich in degrees.\n * @param {number} L Longitude.\n * @param {number} alpha Apparent right ascension of the sun.\n * @returns {number} Local hour angle of the sun.\n */\nconst localHourAngle = (theta0, L, alpha) => {\n    // Signflip for longitude\n    let H = reduceAngle(theta0 + L - alpha);\n    if (H > 180) {\n        H -= 360;\n    }\n    return H;\n};\n\n/**\n * Calculates the altitude of the sun above the horizon (see AA P93 Eq13.6).\n * @param {number} phi Latitude.\n * @param {number} delta Apparent declination of the sun.\n * @param {number} H Local hour angle of the sun.\n * @returns {number} Altitude of the sun above the horizon.\n */\nconst altitude = (phi, delta, H) => rad2deg(Math.asin(\n    sind(phi) * sind(delta) + cosd(phi) * cosd(delta) * cosd(H)));\n\n/**\n * Interpolates the sun's right ascension (see AA p103).\n * @param {number} T Fractional number of Julian centuries since\n *     2000-01-01T12:00:00Z.\n * @param {number} n Fractional time of day of the event corrected by ΔT.\n * @returns {number} Interpolated right ascension.\n */\nconst interpolatedRa = (T, n) => {\n    const alpha1 = sunApparentRightAscension(T - (1 / 36525));\n    const alpha2 = sunApparentRightAscension(T);\n    const alpha3 = sunApparentRightAscension(T + (1 / 36525));\n    const alpha = interpolateFromThree(alpha1, alpha2, alpha3, n, true);\n    return reduceAngle(alpha);\n};\n\n/**\n * Interpolates the sun's declination (see AA p103).\n * @param {number} T Fractional number of Julian centuries since\n *     2000-01-01T12:00:00Z.\n * @param {number} n Fractional time of day of the event corrected by ΔT.\n * @returns {number} Interpolated declination.\n */\nconst interpolatedDec = (T, n) => {\n    const delta1 = sunApparentDeclination(T - (1 / 36525));\n    const delta2 = sunApparentDeclination(T);\n    const delta3 = sunApparentDeclination(T + (1 / 36525));\n    const delta = interpolateFromThree(delta1, delta2, delta3, n);\n    return reduceAngle(delta);\n};\n\n/**\n * Calculates the apparent right ascension of the sun (see AA p165 Eq25.6).\n * @param {number} T Fractional number of Julian centuries since\n *     2000-01-01T12:00:00Z.\n * @returns {number} Apparent right ascension of the sun.\n */\nconst sunApparentRightAscension = (T) => {\n    const Omega = moonAscendingNodeLongitude(T);\n    const epsilon = trueObliquityOfEcliptic(T) + 0.00256 * cosd(Omega);\n    const lambda = sunApparentLongitude(T);\n    const alpha = rad2deg(Math.atan2(cosd(epsilon) * sind(lambda), cosd(lambda)));\n    return reduceAngle(alpha);\n};\n\n/**\n * Calculates the apparent declination of the sun (see AA p165 Eq25.7).\n * @param {number} T Fractional number of Julian centuries since\n *     2000-01-01T12:00:00Z.\n * @returns {number} Apparent declination of the sun.\n */\nconst sunApparentDeclination = (T) => {\n    const Omega = moonAscendingNodeLongitude(T);\n    const epsilon = trueObliquityOfEcliptic(T) + 0.00256 * cosd(Omega);\n    const lambda = sunApparentLongitude(T);\n    return rad2deg(Math.asin(sind(epsilon) * sind(lambda)));\n};\n\n/**\n * Calculates the apparent sidereal time at Greenwich (see AA p88).\n * @param {number} T Fractional number of Julian centuries since\n *     2000-01-01T12:00:00Z.\n * @returns {number} Apparent sidereal time at Greenwich\n */\nconst apparentSiderealTimeGreenwich = (T) => {\n    const theta0 = meanSiderealTimeGreenwich(T);\n    const epsilon = trueObliquityOfEcliptic(T);\n    const DeltaPsi = nutationInLongitude(T);\n    const theta = theta0 + DeltaPsi * cosd(epsilon);\n    return reduceAngle(theta);\n};\n\n/**\n * Calculates the mean sidereal time at Greenwich (see AA p88 Eq12.4).\n * @param {number} T Fractional number of Julian centuries since\n *     2000-01-01T12:00:00Z.\n * @returns {number} Mean sidereal time at Greenwich\n */\nconst meanSiderealTimeGreenwich = (T) => {\n    const JD2000 = T * 36525;\n    return 280.46061837 + 360.98564736629 * JD2000 + 0.000387933 * T ** 2 - T ** 3 / 38710000;\n};\n\n/**\n * Calculates the true obliquity of the ecliptic (see AA p147).\n * @param {number} T Fractional number of Julian centuries since\n *     2000-01-01T12:00:00Z.\n * @returns {number} True obliquity of the ecliptic.\n */\nconst trueObliquityOfEcliptic = (T) => {\n    const epsilon0 = meanObliquityOfEcliptic(T);\n    const DeltaEpsilon = nutationInObliquity(T);\n    return epsilon0 + DeltaEpsilon;\n};\n\n/**\n * Calculates the mean obliquity of the ecliptic (see AA p147 Eq 22.3).\n * @param {number} T Fractional number of Julian centuries since\n *     2000-01-01T12:00:00Z.\n * @returns {number} Mean obliquity of the ecliptic.\n */\nconst meanObliquityOfEcliptic = (T) => {\n    const U = T / 100;\n    return polynomial(U, constants.meanObliquityOfEcliptic);\n};\n\n/**\n * Calculates the apparent longitude of the sun (see AA p164).\n * @param {number} T Fractional number of Julian centuries since\n *     2000-01-01T12:00:00Z.\n * @returns {number} Apparent longitude of the sun.\n */\nconst sunApparentLongitude = (T) => {\n    const Sol = sunTrueLongitude(T);\n    const Omega = moonAscendingNodeLongitude(T);\n    return Sol - 0.00569 - 0.00478 * sind(Omega);\n};\n\n/**\n * Calculates the true longitude of the sun (see AA p164).\n * @param {number} T Fractional number of Julian centuries since\n *     2000-01-01T12:00:00Z.\n * @returns {number} True longitude of the sun.\n */\nconst sunTrueLongitude = (T) => {\n    const L0 = sunMeanLongitude(T);\n    const C = sunEquationOfCenter(T);\n    return L0 + C;\n};\n\n/**\n * Calculates the equation of center of the sun (see AA p164).\n * @param {number} T Fractional number of Julian centuries since\n *     2000-01-01T12:00:00Z.\n * @returns {number} Equation of center of the sun.\n */\nconst sunEquationOfCenter = (T) => {\n    const M = sunMeanAnomaly(T);\n    return (1.914602 - 0.004817 * T - 0.000014 * T ** 2) * sind(M) +\n        (0.019993 - 0.000101 * T) * sind(2 * M) + 0.000290 * sind(3 * M);\n};\n\n/**\n * Calculates the nutation in longitude of the sun (see AA p144ff).\n * @param {number} T Fractional number of Julian centuries since\n *     2000-01-01T12:00:00Z.\n * @returns {number} Nutation in longitude of the sun.\n */\nconst nutationInLongitude = (T) => {\n    const D = moonMeanElongation(T);\n    const M = sunMeanAnomaly(T);\n    const MPrime = moonMeanAnomaly(T);\n    const F = moonArgumentOfLatitude(T);\n    const Omega = moonAscendingNodeLongitude(T);\n    let DeltaPsi = 0;\n    let sineArg;\n    for (let i = 0; i < 63; i++) {\n        sineArg = constants.nutations[i][0] * D + constants.nutations[i][1] * M + constants.nutations[i][2] * MPrime +\n            constants.nutations[i][3] * F + constants.nutations[i][4] * Omega;\n        DeltaPsi += (constants.nutations[i][5] + constants.nutations[i][6] * T) * sind(sineArg);\n    }\n    return DeltaPsi / 36000000;\n};\n\n/**\n * Calculates the nutation in obliquity of the sun (see AA p144ff).\n * @param {number} T Fractional number of Julian centuries since\n *     2000-01-01T12:00:00Z.\n * @returns {number} Nutation in obliquity of the sun.\n */\nconst nutationInObliquity = (T) => {\n    const D = moonMeanElongation(T);\n    const M = sunMeanAnomaly(T);\n    const MPrime = moonMeanAnomaly(T);\n    const F = moonArgumentOfLatitude(T);\n    const Omega = moonAscendingNodeLongitude(T);\n    let DeltaEpsilon = 0;\n    let cosArg;\n    for (let i = 0; i < 63; i++) {\n        cosArg = constants.nutations[i][0] * D + constants.nutations[i][1] * M + constants.nutations[i][2] * MPrime +\n            constants.nutations[i][3] * F + constants.nutations[i][4] * Omega;\n        DeltaEpsilon += (constants.nutations[i][7] + constants.nutations[i][8] * T) * cosd(cosArg);\n    }\n    return DeltaEpsilon / 36000000;\n};\n\n/**\n * Calculates the argument of latitude of the moon (see AA p144).\n * @param {number} T Fractional number of Julian centuries since\n *     2000-01-01T12:00:00Z.\n * @returns {number} Argument of latitude of the moon.\n */\nconst moonArgumentOfLatitude = (T) => {\n    const F = polynomial(T, constants.moonArgumentOfLatitude);\n    return reduceAngle(F);\n};\n\n/**\n * Calculates the longitude of the ascending node of the Moon's mean orbit on\n * the ecliptic, measured from the mean equinox of the datea (see AA p144).\n * @param {number} T Fractional number of Julian centuries since\n *     2000-01-01T12:00:00Z.\n * @returns {number} Longitude of the asc. node of the moon's mean orbit.\n */\nconst moonAscendingNodeLongitude = (T) => {\n    const Omega = polynomial(T, constants.moonAscendingNodeLongitude);\n    return reduceAngle(Omega);\n};\n\n/**\n * Calculates the mean anomaly of the moon (see AA p144).\n * @param {number} T Fractional number of Julian centuries since\n *     2000-01-01T12:00:00Z.\n * @returns {number} Mean anomaly of the moon.\n */\nconst moonMeanAnomaly = (T) => {\n    const MPrime = polynomial(T, constants.moonMeanAnomaly);\n    return reduceAngle(MPrime);\n};\n\n/**\n * Calculates the mean elongation of the moon from the sun (see AA p144).\n * @param {number} T Fractional number of Julian centuries since\n *     2000-01-01T12:00:00Z.\n * @returns {number} Mean elongation of the moon from the sun.\n */\nconst moonMeanElongation = (T) => {\n    const D = polynomial(T, constants.moonMeanElongation);\n    return reduceAngle(D);\n};\n\n/**\n * Calculates the mean anomaly of the sun (see AA p144).\n * @param {number} T Fractional number of Julian centuries since\n *     2000-01-01T12:00:00Z.\n * @returns {number} Mean anomaly of the sun.\n */\nconst sunMeanAnomaly = (T) => {\n    const M = polynomial(T, constants.sunMeanAnomaly);\n    return reduceAngle(M);\n};\n\n/**\n * Calculates the mean longitude of the sun referred to the mean equinox of the\n * date (see AA p163).\n * @param {number} T Fractional number of Julian centuries since\n *     2000-01-01T12:00:00Z.\n * @returns {number} Mean longitude of the sun referred to the mean equinox of\n *     the date.\n */\nconst sunMeanLongitude = (T) => {\n    const L0 = polynomial(T, constants.sunMeanLongitude);\n    return reduceAngle(L0);\n};\n\nconst noEventCodes = {\n    SUN_HIGH: 'SUN_HIGH',\n    SUN_LOW: 'SUN_LOW',\n};\n\nexport { sunRiseSet, sunTransit, handleNoEventCase };\n","import { cosd, sind } from './auxMath';\nimport { kToT } from './timeConversions';\n\n/**\n * Calculates the Julian date in ephemeris time of the moon near the date\n * corresponding to k (see AA p350ff).\n * @param {number} k The approximate fractional number of new moons since\n *     2000-01-06.\n * @param {int} phase 0 -> new moon, 1 -> first quarter,\n *                    2 -> full moon, 3 -> last quarter.\n * @returns {number} Julian date in ephemeris time of the moon of given phase.\n */\nconst truePhase = (k, phase) => {\n    k += phase / 4;\n    const T = kToT(k);\n    const E = eccentricityCorrection(T);\n    const JDE = meanPhase(T, k);\n    const M = sunMeanAnomaly(T, k);\n    const MPrime = moonMeanAnomaly(T, k);\n    const F = moonArgumentOfLatitude(T, k);\n    const Omega = moonAscendingNodeLongitude(T, k);\n    const A = planetaryArguments(T, k);\n    let DeltaJDE = 0;\n    if (phase === 0 || phase === 2) {\n        DeltaJDE += newMoonFullMoonCorrections(E, M, MPrime, F, Omega, phase);\n    } else if (phase === 1 || phase === 3) {\n        DeltaJDE += quarterCorrections(E, M, MPrime, F, Omega, phase);\n    }\n    DeltaJDE += commonCorrections(A);\n    return JDE + DeltaJDE;\n};\n\n/**\n * Calculates the mean phase of the moon as Julian date in ephemeris time (see\n * AA p349 Eq49.1).\n * @param {number} T Fractional number of Julian centuries since\n *     2000-01-01T12:00:00Z.\n * @param {number} k The approximate fractional number of new moons since\n *     2000-01-06.\n * @returns {number} Julian date in ephemeris time of the moon of given mean\n *     phase.\n */\nconst meanPhase = (T, k) => 2451550.09766 + 29.530588861 * k + 0.00015437 * T ** 2 - 0.000000150 * T ** 3 +\n        0.00000000073 * T ** 4;\n\n/**\n * Calculates the mean anomaly of the sun (see AA p350 Eq49.4).\n * @param {number} T Fractional number of Julian centuries since\n *     2000-01-01T12:00:00Z.\n * @param {number} k The approximate fractional number of new moons since\n *     2000-01-06.\n * @returns {number} Mean anomaly of the sun at the given time.\n */\nconst sunMeanAnomaly = (T, k) => 2.5534 + 29.10535670 * k - 0.0000014 * T ** 2 - 0.00000011 * T ** 3;\n\n/**\n * Calculates the mean anomaly of the moon (see AA p350 Eq49.5).\n * @param {number} T Fractional number of Julian centuries since\n *     2000-01-01T12:00:00Z.\n * @param {number} k The approximate fractional number of new moons since\n *     2000-01-06.\n * @returns {number} Mean anomaly of the moon at the given time.\n */\nconst moonMeanAnomaly = (T, k) => 201.5643 + 385.81693528 * k + 0.0107582 * T ** 2 + 0.00001238 * T ** 3 -\n    0.000000058 * T ** 4;\n\n/**\n * Calculates the argument of latitude of the moon (see AA p350 Eq49.6).\n * @param {number} T Fractional number of Julian centuries since\n *     2000-01-01T12:00:00Z.\n * @param {number} k The approximate fractional number of new moons since\n *     2000-01-06.\n * @returns {number} Argument of latitude of the moon at the given time.\n */\nconst moonArgumentOfLatitude = (T, k) => 160.7108 + 390.67050284 * k - 0.0016118 * T ** 2 - 0.00000227 * T ** 3 +\n    0.000000011 * T ** 4;\n\n/**\n * Calculates the longitude of the ascending node of the lunar orbit (see AA\n * p350 Eq49.7).\n * @param {number} T Fractional number of Julian centuries since\n *     2000-01-01T12:00:00Z.\n * @param {number} k The approximate fractional number of new moons since\n *     2000-01-06.\n * @returns {number} Longitude of the ascending node of the lunar orbit at the\n *     given time.\n */\nconst moonAscendingNodeLongitude = (T, k) => 124.7746 - 1.56375588 * k + 0.0020672 * T ** 2 + 0.00000215 * T ** 3;\n\n/**\n * Calculates the correction for the eccentricity of the earth's orbit.\n * @param {number} T Fractional number of Julian centuries since\n *     2000-01-01T12:00:00Z.\n * @returns {number} Eccentricity correction.\n */\nconst eccentricityCorrection = (T) => 1 - 0.002516 * T - 0.0000074 * T ** 2;\n\n/**\n * Calculates the planetary arguments for the moon phases (see AA p351).\n * @param {number} T Fractional number of Julian centuries since\n *     2000-01-01T12:00:00Z.\n * @param {number} k The approximate fractional number of new moons since\n *     2000-01-06.\n * @returns {array} Planetary arguments for the moon phases.\n */\nconst planetaryArguments = (T, k) => [\n    0,\n    299.77 + 0.107408 * k - 0.009173 * T ** 2,\n    251.88 + 0.016321 * k,\n    251.83 + 26.651886 * k,\n    349.42 + 36.412478 * k,\n    84.66 + 18.206239 * k,\n    141.74 + 53.303771 * k,\n    207.14 + 2.453732 * k,\n    154.84 + 7.306860 * k,\n    34.52 + 27.261239 * k,\n    207.19 + 0.121824 * k,\n    291.34 + 1.844379 * k,\n    161.72 + 24.198154 * k,\n    239.56 + 25.513099 * k,\n    331.55 + 3.592518 * k];\n\n/**\n * Calculates the corrections to the planetary arguments for the moon phases\n * that are common to all phases (see AA p352).\n * @param {array} A Array of planetary arguments\n * @returns {number} Correction to the Julian date in ephemeris time for the\n *     moon phase.\n */\nconst commonCorrections = (A) => 0.000325 * sind(A[1]) + 0.000165 * sind(A[2]) + 0.000164 * sind(A[3]) +\n    0.000126 * sind(A[4]) + 0.000110 * sind(A[5]) + 0.000062 * sind(A[6]) + 0.000060 * sind(A[7]) +\n    0.000056 * sind(A[8]) + 0.000047 * sind(A[9]) + 0.000042 * sind(A[10]) + 0.000040 * sind(A[11]) +\n    0.000037 * sind(A[12]) + 0.000035 * sind(A[13]) + 0.000023 * sind(A[14]);\n\n/**\n * Calculates the corrections to the planetary arguments for the moon phases\n * for full and new moons (see AA p351).\n * @param {number} E Correction for the eccentricity of the earth's orbit.\n * @param {number} M Mean anomaly of the sun.\n * @param {number} MPrime Mean anomaly of the moon.\n * @param {number} F Argument of latitude of the moon.\n * @param {number} Omega Longitude of the ascending node of the lunar orbit.\n * @param {int} phase 0 -> new moon, 1 -> first quarter,\n *                    2 -> full moon, 3 -> last quarter.\n * @returns {number} Correction to the Julian date in ephemeris time for the\n *     moon phase.\n */\nconst newMoonFullMoonCorrections = (E, M, MPrime, F, Omega, phase) => {\n    let DeltaJDE =\n        -0.00111 * sind(MPrime - 2 * F) -\n        0.00057 * sind(MPrime + 2 * F) +\n        0.00056 * E * sind(2 * MPrime + M) -\n        0.00042 * sind(3 * MPrime) +\n        0.00042 * E * sind(M + 2 * F) +\n        0.00038 * E * sind(M - 2 * F) -\n        0.00024 * E * sind(2 * MPrime - M) -\n        0.00017 * sind(Omega) -\n        0.00007 * sind(MPrime + 2 * M) +\n        0.00004 * sind(2 * MPrime - 2 * F) +\n        0.00004 * sind(3 * M) +\n        0.00003 * sind(MPrime + M - 2 * F) +\n        0.00003 * sind(2 * MPrime + 2 * F) -\n        0.00003 * sind(MPrime + M + 2 * F) +\n        0.00003 * sind(MPrime - M + 2 * F) -\n        0.00002 * sind(MPrime - M - 2 * F) -\n        0.00002 * sind(3 * MPrime + M) +\n        0.00002 * sind(4 * MPrime);\n    if (phase === 0) {\n        DeltaJDE +=\n            -0.40720 * sind(MPrime) +\n            0.17241 * E * sind(M) +\n            0.01608 * sind(2 * MPrime) +\n            0.01039 * sind(2 * F) +\n            0.00739 * E * sind(MPrime - M) -\n            0.00514 * E * sind(MPrime + M) +\n            0.00208 * E * E * sind(2 * M);\n    } else if (phase === 2) {\n        DeltaJDE +=\n            -0.40614 * sind(MPrime) +\n            0.17302 * E * sind(M) +\n            0.01614 * sind(2 * MPrime) +\n            0.01043 * sind(2 * F) +\n            0.00734 * E * sind(MPrime - M) -\n            0.00515 * E * sind(MPrime + M) +\n            0.00209 * E * E * sind(2 * M);\n    }\n    return DeltaJDE;\n};\n\n/**\n * Calculates the corrections to the planetary arguments for the moon phases\n * for first and last quarters (see AA p352).\n * @param {number} E Correction for the eccentricity of the earth's orbit.\n * @param {number} M Mean anomaly of the sun.\n * @param {number} MPrime Mean anomaly of the moon.\n * @param {number} F Argument of latitude of the moon.\n * @param {number} Omega Longitude of the ascending node of the lunar orbit.\n * @param {int} phase 0 -> new moon, 1 -> first quarter,\n *                    2 -> full moon, 3 -> last quarter.\n * @returns {number} Correction to the Julian date in ephemeris time for the\n *     moon phase.\n */\nconst quarterCorrections = (E, M, MPrime, F, Omega, phase) => {\n    let DeltaJDE =\n        -0.62801 * sind(MPrime) +\n        0.17172 * E * sind(M) -\n        0.01183 * E * sind(MPrime + M) +\n        0.00862 * sind(2 * MPrime) +\n        0.00804 * sind(2 * F) +\n        0.00454 * E * sind(MPrime - M) +\n        0.00204 * E * E * sind(2 * M) -\n        0.00180 * sind(MPrime - 2 * F) -\n        0.00070 * sind(MPrime + 2 * F) -\n        0.00040 * sind(3 * MPrime) -\n        0.00034 * E * sind(2 * MPrime - M) +\n        0.00032 * E * sind(M + 2 * F) +\n        0.00032 * E * sind(M - 2 * F) -\n        0.00028 * E * E * sind(MPrime + 2 * M) +\n        0.00027 * E * sind(2 * MPrime + M) -\n        0.00017 * sind(Omega) -\n        0.00005 * sind(MPrime - M - 2 * F) +\n        0.00004 * sind(2 * MPrime + 2 * F) -\n        0.00004 * sind(MPrime + M + 2 * F) +\n        0.00004 * sind(MPrime - 2 * M) +\n        0.00003 * sind(MPrime + M - 2 * F) +\n        0.00003 * sind(3 * M) +\n        0.00002 * sind(2 * MPrime - 2 * F) +\n        0.00002 * sind(MPrime - M + 2 * F) -\n        0.00002 * sind(3 * MPrime + M);\n    const W =\n        0.00306 -\n        0.00038 * E * cosd(M) +\n        0.00026 * cosd(MPrime) -\n        0.00002 * cosd(MPrime - M) +\n        0.00002 * cosd(MPrime + M) +\n        0.00002 * cosd(2 * F);\n    if (phase === 1) {\n        DeltaJDE += W;\n    } else if (phase === 3) {\n        DeltaJDE -= W;\n    }\n    return DeltaJDE;\n};\n\nexport { truePhase };\n","import * as luxon from 'luxon';\nimport { DeltaT, JDToDatetime, approxK } from './timeConversions';\nimport { handleNoEventCase, sunRiseSet, sunTransit } from './sunTimes';\nimport { truePhase } from './moonPhases';\n\nlet roundToNearestMinute = false;\nlet returnTimeForNoEventCase = false;\nlet dateFormatKeys = {\n    SUN_HIGH: '‡',\n    SUN_LOW: '†',\n};\n\n/**\n * Sets options (roundToNearestMinute, returnTimeForNoEventCase, dateFormatKey) for the\n * module.\n * @param {object} options Options to be set.\n */\nconst options = (options) => {\n    if (typeof options.roundToNearestMinute === 'boolean') {\n        roundToNearestMinute = options.roundToNearestMinute;\n    }\n    if (typeof options.returnTimeForNoEventCase === 'boolean') {\n        returnTimeForNoEventCase = options.returnTimeForNoEventCase;\n    }\n    if (typeof options.dateFormatKeys === 'object') {\n        dateFormatKeys = options.dateFormatKeys;\n    }\n};\n\n/**\n * Uses the extra information encoded into the DateTime object for dates without\n * a sun event if returnTimeForNoEventCase is true to mark the output string.\n * @param {DateTime} datetime Input datetime.\n * @param {string} formatString Valid DateTime format string.\n * @returns {string} Formatted string with marker appended.\n */\nconst formatCI = (datetime, formatString) => {\n    const noEventCode = datetime.errorCode;\n    let datestring = datetime.toFormat(formatString);\n    if (dateFormatKeys[noEventCode]) {\n        datestring += dateFormatKeys[noEventCode];\n    }\n    return datestring;\n};\n\n/**\n * Calculates sunrise on the provided date.\n * @param {DateTime} datetime Datetime for which sunrise is calculated. Should\n *     always contain a timezone or be in UTC, lone UTC offsets might lead to\n *     unexpected behaviour.\n * @param {number} phi Latitude of target location.\n * @param {number} L longitude of target location.\n * @returns {(DateTime|string)} Time of sunrise or a string indicating that no\n *     event could be calculated as the sun was too high ('SUN_HIGH') or too low\n *     ('SUN_LOW') during the entire day (unless returnTimeForNoEventCase is true).\n */\nconst sunrise = (datetime, phi, L) => {\n    try {\n        return sunRiseSet(datetime, phi, L, 'RISE');\n    } catch (err) {\n        return handleNoEventCase(datetime, err, 6);\n    }\n};\n\n/**\n * Calculates sunset on the provided date.\n * @param {DateTime} datetime Datetime for which sunset is calculated. Should\n *     always contain a timezone or be in UTC, lone UTC offsets might lead to\n *     unexpected behaviour.\n * @param {number} phi Latitude of target location.\n * @param {number} L longitude of target location.\n * @returns {(DateTime|string)} Time of sunset or a string indicating that no\n *     event could be calculated as the sun was too high ('SUN_HIGH') or too low\n *     ('SUN_LOW') during the entire day (unless returnTimeForNoEventCase is true).\n */\nconst sunset = (datetime, phi, L) => {\n    try {\n        return sunRiseSet(datetime, phi, L, 'SET');\n    } catch (err) {\n        return handleNoEventCase(datetime, err, 18);\n    }\n};\n\n/**\n * Calculates civil dawn (sun 6° below horizon) on the provided date.\n * @param {DateTime} datetime Datetime for which civil dawn is calculated. Should\n *     always contain a timezone or be in UTC, lone UTC offsets might lead to\n *     unexpected behaviour.\n * @param {number} phi Latitude of target location.\n * @param {number} L longitude of target location.\n * @returns {(DateTime|string)} Time of civil dawn or a string indicating that no\n *     event could be calculated as the sun was too high ('SUN_HIGH') or too low\n *     ('SUN_LOW') during the entire day (unless returnTimeForNoEventCase is true).\n */\nconst civilDawn = (datetime, phi, L) => {\n    try {\n        return sunRiseSet(datetime, phi, L, 'RISE', 6);\n    } catch (err) {\n        return handleNoEventCase(datetime, err, 5, 30);\n    }\n};\n\n/**\n * Calculates civil dusk (sun 6° below horizon) on the provided date.\n * @param {DateTime} datetime Datetime for which civil dusk is calculated. Should\n *     always contain a timezone or be in UTC, lone UTC offsets might lead to\n *     unexpected behaviour.\n * @param {number} phi Latitude of target location.\n * @param {number} L longitude of target location.\n * @returns {(DateTime|string)} Time of civil dusk or a string indicating that no\n *     event could be calculated as the sun was too high ('SUN_HIGH') or too low\n *     ('SUN_LOW') during the entire day (unless returnTimeForNoEventCase is true).\n */\nconst civilDusk = (datetime, phi, L) => {\n    try {\n        return sunRiseSet(datetime, phi, L, 'SET', 6);\n    } catch (err) {\n        return handleNoEventCase(datetime, err, 18, 30);\n    }\n};\n\n/**\n * Calculates nautical dawn (sun 12° below horizon) on the provided date.\n * @param {DateTime} datetime Datetime for which nautical dawn is calculated.\n *     Should always contain a timezone or be in UTC, lone UTC offsets might\n *     lead to unexpected behaviour.\n * @param {number} phi Latitude of target location.\n * @param {number} L longitude of target location.\n * @returns {(DateTime|string)} Time of nautical dawn or a string indicating that no\n *     event could be calculated as the sun was too high ('SUN_HIGH') or too low\n *     ('SUN_LOW') during the entire day (unless returnTimeForNoEventCase is true).\n */\nconst nauticalDawn = (datetime, phi, L) => {\n    try {\n        return sunRiseSet(datetime, phi, L, 'RISE', 12);\n    } catch (err) {\n        return handleNoEventCase(datetime, err, 5);\n    }\n};\n\n/**\n * Calculates nautical dusk (sun 12° below horizon) on the provided date.\n * @param {DateTime} datetime Datetime for which nautical dusk is calculated.\n *     Should always contain a timezone or be in UTC, lone UTC offsets might\n *     lead to unexpected behaviour.\n * @param {number} phi Latitude of target location.\n * @param {number} L longitude of target location.\n * @returns {(DateTime|string)} Time of nautical dusk or a string indicating that no\n *     event could be calculated as the sun was too high ('SUN_HIGH') or too low\n *     ('SUN_LOW') during the entire day (unless returnTimeForNoEventCase is true).\n */\nconst nauticalDusk = (datetime, phi, L) => {\n    try {\n        return sunRiseSet(datetime, phi, L, 'SET', 12);\n    } catch (err) {\n        return handleNoEventCase(datetime, err, 19);\n    }\n};\n\n/**\n * Calculates astronomical dawn (sun 18° below horizon) on the provided date.\n * @param {DateTime} datetime Datetime for which astronomical dawn is calculated.\n *     Should always contain a timezone or be in UTC, lone UTC offsets might\n *     lead to unexpected behaviour.\n * @param {number} phi Latitude of target location.\n * @param {number} L longitude of target location.\n * @returns {(DateTime|string)} Time of astronomical dawn or a string indicating that no\n *     event could be calculated as the sun was too high ('SUN_HIGH') or too low\n *     ('SUN_LOW') during the entire day (unless returnTimeForNoEventCase is true).\n */\nconst astronomicalDawn = (datetime, phi, L) => {\n    try {\n        return sunRiseSet(datetime, phi, L, 'RISE', 18);\n    } catch (err) {\n        return handleNoEventCase(datetime, err, 4, 30);\n    }\n};\n\n/**\n * Calculates astronomical dusk (sun 18° below horizon) on the provided date.\n * @param {DateTime} datetime Datetime for which astronomical dusk is calculated.\n *     Should always contain a timezone or be in UTC, lone UTC offsets might\n *     lead to unexpected behaviour.\n * @param {number} phi Latitude of target location.\n * @param {number} L longitude of target location.\n * @returns {(DateTime|string)} Time of astronomical dusk or a string indicating that no\n *     event could be calculated as the sun was too high ('SUN_HIGH') or too low\n *     ('SUN_LOW') during the entire day (unless returnTimeForNoEventCase is true).\n */\nconst astronomicalDusk = (datetime, phi, L) => {\n    try {\n        return sunRiseSet(datetime, phi, L, 'SET', 18);\n    } catch (err) {\n        return handleNoEventCase(datetime, err, 19, 30);\n    }\n};\n\n/**\n * Calculates solar noon on the provided date.\n * @param {DateTime} datetime Datetime for which solar noon is calculated. Should\n *     always contain a timezone or be in UTC, lone UTC offsets might lead to\n *     unexpected behaviour.\n * @param {number} L longitude of target location.\n * @returns {DateTime} Time of solar noon at the given longitude.\n */\nconst solarNoon = (datetime, L) => sunTransit(datetime, L);\n\n/**\n * Calculates all moons of the given phase that occur within the given\n * Gregorian calendar year.\n * @param {int} year Year for which moon phases should be calculated.\n * @param {int} phase 0 -> new moon, 1 -> first quarter,\n *                    2 -> full moon, 3 -> last quarter.\n * @param {string} timezone Optional: IANA timezone string.\n * @returns {array} Array of moment objects for moons of the given phase.\n */\nconst yearMoonPhases = (year, phase, timezone = 'UTC') => {\n    const yearBegin = luxon.DateTime.fromObject(\n        // eslint-disable-next-line sort-keys\n        { year, month: 1, day: 1, hour: 0, minute: 0, second: 0, zone: timezone });\n    const yearEnd = luxon.DateTime.fromObject(\n        // eslint-disable-next-line sort-keys\n        { year: year + 1, month: 1, day: 1, hour: 0, minute: 0, second: 0, zone: timezone });\n    // this will give us k for the first new moon of the year or earlier\n    let k = Math.floor(approxK(yearBegin)) - 1;\n    // taking 15 events will make sure we catch every event in the year\n    const phaseTimes = [];\n    let JDE;\n    let moonDatetime;\n    let deltaT;\n    for (let i = 0; i < 15; i++) {\n        JDE = truePhase(k, phase);\n        // we pretend it's JD and not JDE\n        moonDatetime = JDToDatetime(JDE).setZone(timezone);\n        // now use that to calculate deltaT\n        deltaT = DeltaT(moonDatetime);\n        if (deltaT > 0) {\n            moonDatetime = moonDatetime.minus({ seconds: Math.abs(deltaT) });\n        } else {\n            moonDatetime = moonDatetime.plus({ seconds: Math.abs(deltaT) });\n        }\n        if (roundToNearestMinute) {\n            moonDatetime = moonDatetime.plus({ seconds: 30 }).set({ second: 0 });\n        }\n        if (moonDatetime >= yearBegin && moonDatetime < yearEnd) {\n            phaseTimes.push(moonDatetime);\n        }\n        k++;\n    }\n    return phaseTimes;\n};\n\nexport {\n    options, formatCI, sunrise, sunset, civilDawn, civilDusk, nauticalDawn, nauticalDusk, astronomicalDawn,\n    astronomicalDusk, solarNoon, yearMoonPhases, roundToNearestMinute, returnTimeForNoEventCase,\n};\n"],"names":["deg2rad","deg","rad2deg","rad","sind","Math","sin","cosd","cos","reduceAngle","angle","floor","polynomial","variable","coeffs","varPower","sum","numCoeffs","length","i","interpolateFromThree","y1","y2","y3","n","normalize","a","b","JDToDatetime","JD","Z","F","A","alpha","B","C","D","E","fracDay","day","hour","minute","second","month","year","luxon.DateTime","fromISO","zone","set","datetimeToT","datetime","Y","M","datetimeToJD","DeltaT","u","t","y","sunMeanAnomaly","sunMeanLongitude","meanObliquityOfEcliptic","moonArgumentOfLatitude","moonAscendingNodeLongitude","moonMeanAnomaly","moonMeanElongation","nutations","sunRiseSet","phi","L","flag","offset","timezone","suntime","setZone","keepLocalTime","deltaT","T","Theta0","apparentSiderealTimeGreenwich","TD","sunApparentRightAscension","delta","sunApparentDeclination","H0","approxLocalHourAngle","m","m0","normalizeM","counter","DeltaM","abs","sunRiseSetCorrection","plus","seconds","minus","roundToNearestMinute","handleNoEventCase","date","errorCode","returnTimeForNoEventCase","returnDate","minutes","isInDST","cosH0","noEventCodes","SUN_HIGH","SUN_LOW","acos","utcOffset","localM","sunTransitCorrection","theta0","interpolatedRa","localHourAngle","interpolatedDec","H","altitude","asin","alpha1","alpha2","alpha3","delta1","delta2","delta3","Omega","epsilon","trueObliquityOfEcliptic","lambda","sunApparentLongitude","atan2","meanSiderealTimeGreenwich","theta","nutationInLongitude","nutationInObliquity","constants.meanObliquityOfEcliptic","Sol","sunTrueLongitude","sunEquationOfCenter","MPrime","sineArg","DeltaPsi","constants.nutations","cosArg","DeltaEpsilon","constants.moonArgumentOfLatitude","constants.moonAscendingNodeLongitude","constants.moonMeanAnomaly","constants.moonMeanElongation","constants.sunMeanAnomaly","L0","constants.sunMeanLongitude","truePhase","k","phase","kToT","eccentricityCorrection","JDE","meanPhase","planetaryArguments","DeltaJDE","newMoonFullMoonCorrections","quarterCorrections","commonCorrections","W","dateFormatKeys","options","formatCI","formatString","noEventCode","datestring","toFormat","sunrise","err","sunset","civilDawn","civilDusk","nauticalDawn","nauticalDusk","astronomicalDawn","astronomicalDusk","solarNoon","transit","sunTransit","yearMoonPhases","yearBegin","fromObject","yearEnd","phaseTimes","moonDatetime","push"],"mappings":"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"}