{"version":3,"file":"meeussunmoon-es.min.js","sources":["../src/timeConversions.js","../src/auxMath.js","../src/constants.js","../src/sunTimes.js","../src/moonPhases.js","../src/index.js"],"sourcesContent":["import * as luxon from 'luxon';\n\n/**\n * Converts a datetime in UTC to the corresponding Julian Date (see AA p60f).\n * @param {DateTime} datetime Datetime to be converted.\n * @returns {number} Julian date (fractional number of days since 1 January\n *     4713BC according to the proleptic Julian calendar.\n */\nconst datetimeToJD = function (datetime) {\n    let Y = datetime.year;\n    let M = datetime.month;\n    const D = datetime.day + (datetime.hour + (datetime.minute + datetime.second / 60) / 60) / 24;\n    if (M < 3) {\n        Y -= 1;\n        M += 12;\n    }\n    const A = Math.floor(Y / 100);\n    // Need a different B if we are before introduction of the Gregorian Calendar\n    const gregorianCutoff = luxon.DateTime.fromISO('1582-10-15T12:00:00Z', { zone: 'UTC' });\n    let B = 0;\n    if (datetime > gregorianCutoff) {\n        B = 2 - A + Math.floor(A / 4);\n    }\n    return Math.floor(365.25 * (Y + 4716)) + Math.floor(30.6001 * (M + 1)) + D + B - 1524.5;\n};\n\n/**\n * Converts a Julian Date to the corresponding datetime in UTC (see AA p63).\n * @param {number} JD Julian date to be converted\n * @returns {DateTime} Datetime corresponding to the given Julian date.\n */\nconst JDToDatetime = function (JD) {\n    JD += 0.5;\n    const Z = Math.floor(JD);\n    const F = JD - Z;\n    let A = Z;\n    if (Z >= 2299161) {\n        const alpha = Math.floor((Z - 1867216.25) / 36524.25);\n        A += 1 + alpha - Math.floor(alpha / 4);\n    }\n    const B = A + 1524;\n    const C = Math.floor((B - 122.1) / 365.25);\n    const D = Math.floor(365.25 * C);\n    const E = Math.floor((B - D) / 30.6001);\n    const fracDay = B - D - Math.floor(30.6001 * E) + F;\n    const day = Math.floor(fracDay);\n    const hour = Math.floor((fracDay - day) * 24);\n    const minute = Math.floor(((fracDay - day) * 24 - hour) * 60);\n    const second = Math.floor((((fracDay - day) * 24 - hour) * 60 - minute) * 60);\n    let month = E - 1;\n    if (E > 13) {\n        month -= 12;\n    }\n    let year = C - 4715;\n    if (month > 2) {\n        year -= 1;\n    }\n    return luxon.DateTime.fromISO('2000-01-01T12:00:00Z', { zone: 'UTC' })\n        // eslint-disable-next-line sort-keys\n        .set({ year, month, day, hour, minute, second });\n};\n\n/**\n * Converts a Julian date to the number of Julian centuries since\n * 2000-01-01T12:00:00Z (see AA p87 Eq12.1).\n * @param {number} JD Julian date.\n * @returns {number} T.\n */\nconst JDToT = function (JD) {\n    return (JD - 2451545) / 36525;\n};\n\n/**\n * Converts a datetime in UTC to the number of Julian centuries since\n * 2000-01-01T12:00:00Z.\n * @param {DateTime} datetime Datetime to be converted.\n * @returns {number} T.\n */\nconst datetimeToT = function (datetime) {\n    return JDToT(datetimeToJD(datetime));\n};\n\n/* eslint-disable complexity */\n/**\n * Calculates the value of ΔT=TT−UT (see\n * http://eclipse.gsfc.nasa.gov/SEcat5/deltatpoly.html).\n * @param {DateTime} datetime Datetime for which ΔT should be calculated.\n * @returns {number} ΔT.\n */\nconst DeltaT = function (datetime) {\n    let y = datetime.year;\n    // Months are zero-indexed\n    y += (datetime.month - 0.5) / 12;\n    let u;\n    let t;\n    switch (true) {\n        case y < -1999 || y > 3000:\n            throw 'DeltaT can only be calculated between 1999 BCE and 3000 CE';\n        case y < -500:\n            u = (y - 1820) / 100;\n            return -20 + 32 * u * u;\n        case y < 500:\n            u = y / 100;\n            return 10583.6 - 1014.41 * u + 33.78311 * u * u - 5.952053 * u * u * u - 0.1798452 * u * u * u * u +\n                0.022174192 * u * u * u * u * u + 0.0090316521 * u * u * u * u * u * u;\n        case y < 1600:\n            u = (y - 1000) / 100;\n            return 1574.2 - 556.01 * u + 71.23472 * u * u + 0.319781 * u * u * u - 0.8503463 * u * u * u * u -\n                0.005050998 * u * u * u * u * u + 0.0083572073 * u * u * u * u * u * u;\n        case y < 1700:\n            t = y - 1600;\n            return 120 - 0.9808 * t - 0.01532 * t * t + t * t * t / 7129;\n        case y < 1800:\n            t = y - 1700;\n            return 8.83 + 0.1603 * t - 0.0059285 * t * t + 0.00013336 * t * t * t - t * t * t * t / 1174000;\n        case y < 1860:\n            t = y - 1800;\n            return 13.72 - 0.332447 * t + 0.0068612 * t * t + 0.0041116 * t * t * t - 0.00037436 * t * t * t * t +\n                0.0000121272 * t * t * t * t * t - 0.0000001699 * t * t * t * t * t * t +\n                0.000000000875 * t * t * t * t * t * t * t;\n        case y < 1900:\n            t = y - 1860;\n            return 7.62 + 0.5737 * t - 0.251754 * t * t + 0.01680668 * t * t * t -\n                0.0004473624 * t * t * t * t + t * t * t * t * t / 233174;\n        case y < 1920:\n            t = y - 1900;\n            return -2.79 + 1.494119 * t - 0.0598939 * t * t + 0.0061966 * t * t * t - 0.000197 * t * t * t * t;\n        case y < 1941:\n            t = y - 1920;\n            return 21.20 + 0.84493 * t - 0.076100 * t * t + 0.0020936 * t * t * t;\n        case y < 1961:\n            t = y - 1950;\n            return 29.07 + 0.407 * t - t * t / 233 + t * t * t / 2547;\n        case y < 1986:\n            t = y - 1975;\n            return 45.45 + 1.067 * t - t * t / 260 - t * t * t / 718;\n        case y < 2005:\n            t = y - 2000;\n            return 63.86 + 0.3345 * t - 0.060374 * t * t + 0.0017275 * t * t * t + 0.000651814 * t * t * t * t +\n                0.00002373599 * t * t * t * t * t;\n        case y < 2050:\n            t = y - 2000;\n            return 62.92 + 0.32217 * t + 0.005589 * t * t;\n        case y < 2150:\n            return -20 + 32 * ((y - 1820) / 100) * ((y - 1820) / 100) -\n                0.5628 * (2150 - y);\n        default:\n            u = (y - 1820) / 100;\n            return -20 + 32 * u * u;\n    }\n};\n/* eslint-enable complexity */\n\n/**\n * Calculates an approximate value for k (the fractional number of new moons\n * since 2000-01-06).\n * @param {DateTime} datetime Datetime for which k is calculated.\n * @returns {number} k.\n */\nconst approxK = function (datetime) {\n    const year = datetime.year + (datetime.month) / 12 +\n        datetime.day / 365.25;\n    return (year - 2000) * 12.3685;\n};\n\n/**\n * Calculates T from k.\n * @param {number} k Fractional number of new moons since 2000-01-06.\n * @returns {number} T Fractional num. of centuries since 2000-01-01:12:00:00Z.\n */\nconst kToT = function (k) {\n    return k / 1236.85;\n};\n\nexport { datetimeToJD, JDToDatetime, JDToT, datetimeToT, DeltaT, approxK, kToT };\n","/**\n * Converts angles in degrees to radians.\n * @param {number} deg Angle in degrees.\n * @returns {number} Angle in radians.\n */\nconst deg2rad = function (deg) {\n    return deg * 0.017453292519943295;\n};\n\n/**\n * Converts angles in radians to degrees.\n * @param {number} rad Angle in radians.\n * @returns {number} Angle in degrees.\n */\nconst rad2deg = function (rad) {\n    return rad * 57.29577951308232;\n};\n\n/**\n * Calculates the sine of an angle given in degrees.\n * @param {number} deg Angle in degrees.\n * @returns {number} Sine of the angle.\n */\nconst sind = function (deg) {\n    return Math.sin(deg2rad(deg));\n};\n\n/**\n * Calculates the cosine of an angle given in degrees.\n * @param {number} deg Angle in degrees.\n * @returns {number} Cosine of the angle.\n */\nconst cosd = function (deg) {\n    return Math.cos(deg2rad(deg));\n};\n\n/**\n * Reduces an angle to the interval 0-360°.\n * @param {number} angle Angle in degrees.\n * @returns {number} Reduced angle in degrees.\n */\nconst reduceAngle = function (angle) {\n    return angle - (360 * Math.floor(angle / 360));\n};\n\n/**\n * Evaluates a polynomial in the form A + Bx + Cx^2...\n * @param {number} variable Value of x in the polynomial.\n * @param {array} coeffs Array of coefficients [A, B, C...].\n * @returns {number} Sum of the polynomial.\n */\nconst polynomial = function (variable, coeffs) {\n    let varPower = 1;\n    let sum = 0.0;\n    const numCoeffs = coeffs.length;\n    for (let i = 0; i < numCoeffs; i++) {\n        sum += varPower * coeffs[i];\n        varPower *= variable;\n    }\n    return sum;\n};\n\n/**\n * Interpolates a value from 3 known values (see AA p24 Eq3.3).\n * @param {number} y1 Start value of the interval.\n * @param {number} y2 Middle value of the interval.\n * @param {number} y3 End value of the interval.\n * @param {number} n Location (-0.5 >= n >= 0.5) of result in the interval.\n * @param {boolean} normalize Whether the final result should be normalized.\n * @returns {number} Interpolated result.\n */\nconst interpolateFromThree = function (y1, y2, y3, n, normalize = false) {\n    let a = y2 - y1;\n    let b = y3 - y2;\n    if (typeof normalize !== 'undefined' && normalize) {\n        if (a < 0) {\n            a += 360;\n        }\n        if (b < 0) {\n            b += 360;\n        }\n    }\n    const c = b - a;\n    return y2 + (n / 2) * (a + b + n * c);\n};\n\nexport { deg2rad, rad2deg, sind, cosd, reduceAngle, polynomial, interpolateFromThree };\n","/** See AA p144 */\nconst sunMeanAnomaly = [357.52772, 35999.050340, -0.0001603, -1 / 300000];\n\n/** See AA p163 Eq 25.2 */\nconst sunMeanLongitude = [280.46646, 36000.76983, 0.0003032];\n\n/** See AA p147 Eq22.3 */\nconst meanObliquityOfEcliptic =\n    [84381.448 / 3600, -4680.93 / 3600, -1.55 / 3600, 1999.25 / 3600, -51.38 / 3600, -249.67 / 3600, -39.05 / 3600,\n        7.12 / 3600, 27.87 / 3600, 5.79 / 3600, 2.45 / 3600];\n\n/** See AA p144 */\nconst moonArgumentOfLatitude =\n    [93.27191, 483202.017538, -0.0036825, 1 / 327270];\n\n/** See AA p144 */\nconst moonAscendingNodeLongitude =\n    [125.04452, -1934.136261, 0.0020708, 1 / 450000];\n\n/** See AA p144 */\nconst moonMeanAnomaly = [134.96298, 477198.867398, 0.0086972, 1 / 56250];\n\n/** See AA p144 */\nconst moonMeanElongation = [297.85036, 445267.111480, -0.0019142, 1 / 189474];\n\n/* eslint-disable no-multi-spaces, array-bracket-spacing */\n/**\n * Nutations in longitude and obliquity\n * See AA p145f\n */\nconst nutations =\n    [\n        [ 0,  0,  0,  0, 1, -171996, -174.2, 92025,  8.9],\n        [-2,  0,  0,  2, 2,  -13187,   -1.6,  5736, -3.1],\n        [ 0,  0,  0,  2, 2,   -2274,   -0.2,   977, -0.5],\n        [ 0,  0,  0,  0, 2,    2062,    0.2,  -895,  0.5],\n        [ 0,  1,  0,  0, 0,    1426,   -3.4,    54, -0.1],\n        [ 0,  0,  1,  0, 0,     712,    0.1,    -7,    0],\n        [-2,  1,  0,  2, 2,    -517,    1.2,   224, -0.6],\n        [ 0,  0,  0,  2, 1,    -386,   -0.4,   200,    0],\n        [ 0,  0,  1,  2, 2,    -301,      0,   129, -0.1],\n        [-2, -1,  0,  2, 2,     217,   -0.5,   -95,  0.3],\n        [-2,  0,  1,  0, 0,    -158,      0,     0,    0],\n        [-2,  0,  0,  2, 1,     129,    0.1,   -70,    0],\n        [ 0,  0, -1,  2, 2,     123,      0,   -53,    0],\n        [ 2,  0,  0,  0, 0,      63,      0,     0,    0],\n        [ 0,  0,  1,  0, 1,      63,    0.1,   -33,    0],\n        [ 2,  0, -1,  2, 2,     -59,      0,    26,    0],\n        [ 0,  0, -1,  0, 1,     -58,   -0.1,    32,    0],\n        [ 0,  0,  1,  2, 1,     -51,      0,    27,    0],\n        [-2,  0,  2,  0, 0,      48,      0,     0,    0],\n        [ 0,  0, -2,  2, 1,      46,      0,   -24,    0],\n        [ 2,  0,  0,  2, 2,     -38,      0,    16,    0],\n        [ 0,  0,  2,  2, 2,     -31,      0,    13,    0],\n        [ 0,  0,  2,  0, 0,      29,      0,     0,    0],\n        [-2,  0,  1,  2, 2,      29,      0,   -12,    0],\n        [ 0,  0,  0,  2, 0,      26,      0,     0,    0],\n        [-2,  0,  0,  2, 0,     -22,      0,     0,    0],\n        [ 0,  0, -1,  2, 1,      21,      0,   -10,    0],\n        [ 0,  2,  0,  0, 0,      17,   -0.1,     0,    0],\n        [ 2,  0, -1,  0, 1,      16,      0,    -8,    0],\n        [-2,  2,  0,  2, 2,     -16,    0.1,     7,    0],\n        [ 0,  1,  0,  0, 1,     -15,      0,     9,    0],\n        [-2,  0,  1,  0, 1,     -13,      0,     7,    0],\n        [ 0, -1,  0,  0, 1,     -12,      0,     6,    0],\n        [ 0,  0,  2, -2, 0,      11,      0,     0,    0],\n        [ 2,  0, -1,  2, 1,     -10,      0,     5,    0],\n        [ 2,  0,  1,  2, 2,     -8,       0,     3,    0],\n        [ 0,  1,  0,  2, 2,      7,       0,    -3,    0],\n        [-2,  1,  1,  0, 0,     -7,       0,     0,    0],\n        [ 0, -1,  0,  2, 2,     -7,       0,     3,    0],\n        [ 2,  0,  0,  2, 1,     -7,       0,     3,    0],\n        [ 2,  0,  1,  0, 0,      6,       0,     0,    0],\n        [-2,  0,  2,  2, 2,      6,       0,    -3,    0],\n        [-2,  0,  1,  2, 1,      6,       0,    -3,    0],\n        [ 2,  0, -2,  0, 1,     -6,       0,     3,    0],\n        [ 2,  0,  0,  0, 1,     -6,       0,     3,    0],\n        [ 0, -1,  1,  0, 0,      5,       0,     0,    0],\n        [-2, -1,  0,  2, 1,     -5,       0,     3,    0],\n        [-2,  0,  0,  0, 1,     -5,       0,     3,    0],\n        [ 0,  0,  2,  2, 1,     -5,       0,     3,    0],\n        [-2,  0,  2,  0, 1,      4,       0,     0,    0],\n        [-2,  1,  0,  2, 1,      4,       0,     0,    0],\n        [ 0,  0,  1, -2, 0,      4,       0,     0,    0],\n        [-1,  0,  1,  0, 0,     -4,       0,     0,    0],\n        [-2,  1,  0,  0, 0,     -4,       0,     0,    0],\n        [ 1,  0,  0,  0, 0,     -4,       0,     0,    0],\n        [ 0,  0,  1,  2, 0,      3,       0,     0,    0],\n        [ 0,  0, -2,  2, 2,     -3,       0,     0,    0],\n        [-1, -1,  1,  0, 0,     -3,       0,     0,    0],\n        [ 0,  1,  1,  0, 0,     -3,       0,     0,    0],\n        [ 0, -1,  1,  2, 2,     -3,       0,     0,    0],\n        [ 2, -1, -1,  2, 2,     -3,       0,     0,    0],\n        [ 0,  0,  3,  2, 2,      3,       0,     0,    0],\n        [ 2, -1,  0,  2, 2,     -3,       0,     0,    0],\n    ];\n/* eslint-enable no-multi-spaces, array-bracket-spacing */\n\nexport { sunMeanAnomaly, sunMeanLongitude, meanObliquityOfEcliptic, moonArgumentOfLatitude, moonAscendingNodeLongitude,\n    moonMeanAnomaly, moonMeanElongation, nutations };\n","import * as auxMath from './auxMath.js';\nimport * as constants from './constants.js';\nimport * as timeConversions from './timeConversions.js';\nimport { returnTimeForNoEventCase, roundToNearestMinute } from './index.js';\n\n/**\n * Calculates the solar transit time on a date at a given longitude (see AA\n * p102f).\n * @param {DateTime} datetime Date for which transit is calculated.\n * @param {number} L Longitude.\n * @returns {DateTime} Solar transit time.\n */\nconst sunTransit = function (datetime, L) {\n    const timezone = datetime.zone;\n    let transit = datetime.set({ hour: 0, minute: 0, second: 0 }).setZone('UTC', { keepLocalTime: true });\n    const DeltaT = timeConversions.DeltaT(transit);\n    const T = timeConversions.datetimeToT(transit);\n    const Theta0 = apparentSiderealTimeGreenwich(T);\n    // Want 0h TD for this, not UT\n    const TD = T - (DeltaT / (3600 * 24 * 36525));\n    const alpha = sunApparentRightAscension(TD);\n    // Sign flip for longitude from AA as we take East as positive\n    let m = (alpha - L - Theta0) / 360;\n    m = normalizeM(m, datetime.offset);\n    const DeltaM = sunTransitCorrection(T, Theta0, DeltaT, L, m);\n    m += DeltaM;\n    transit = transit.plus({ seconds: Math.floor(m * 3600 * 24 + 0.5) });\n    if (roundToNearestMinute) {\n        transit = transit.plus({ seconds: 30 }).set({ second: 0 });\n    }\n    return transit.setZone(timezone);\n};\n\n/**\n * Calculates the sunrise or sunset time on a date at a given latitude and\n * longitude (see AA p102f).\n * @param {DateTime} datetime Date for which sunrise or sunset is calculated.\n * @param {number} phi Latitude.\n * @param {number} L Longitude.\n * @param {string} flag 'RISE' or 'SET' depending on which event should be\n *     calculated.\n * @param {number} offset number of degrees below the horizon for the desired\n *     event (50/60 for sunrise/set, 6 for civil, 12 for nautical, 18 for\n *     astronomical dawn/dusk.\n * @returns {DateTime} Sunrise or sunset time.\n */\n// eslint-disable-next-line complexity,require-jsdoc\nconst sunRiseSet = function (datetime, phi, L, flag, offset = 50 / 60) {\n    const timezone = datetime.zone;\n    let suntime = datetime.set({ hour: 0, minute: 0, second: 0 }).setZone('UTC', { keepLocalTime: true });\n    const DeltaT = timeConversions.DeltaT(suntime);\n    const T = timeConversions.datetimeToT(suntime);\n    const Theta0 = apparentSiderealTimeGreenwich(T);\n    // Want 0h TD for this, not UT\n    const TD = T - (DeltaT / (3600 * 24 * 36525));\n    const alpha = sunApparentRightAscension(TD);\n    const delta = sunApparentDeclination(TD);\n    const H0 = approxLocalHourAngle(phi, delta, offset);\n    // Sign flip for longitude from AA as we take East as positive\n    let m0 = (alpha - L - Theta0) / 360;\n    m0 = normalizeM(m0, datetime.offset);\n    let m;\n    if (flag === 'RISE') {\n        m = m0 - H0 / 360;\n    } else if (flag === 'SET') {\n        m = m0 + H0 / 360;\n    } else {\n        return false;\n    }\n    let counter = 0;\n    let DeltaM = 1;\n    // Repeat if correction is larger than ~9s\n    while ((Math.abs(DeltaM) > 0.0001) && (counter < 3)) {\n        DeltaM = sunRiseSetCorrection(T, Theta0, DeltaT, phi, L, m, offset);\n        m += DeltaM;\n        counter++;\n    }\n    if (m > 0) {\n        suntime = suntime.plus({ seconds: Math.floor(m * 3600 * 24 + 0.5) });\n    } else {\n        suntime = suntime.minus({ seconds: Math.floor(m * 3600 * 24 + 0.5) });\n    }\n    if (roundToNearestMinute) {\n        suntime = suntime.plus({ seconds: 30 }).set({ second: 0 });\n    }\n    return suntime.setZone(timezone);\n};\n\n/**\n * Returns a fixed time as given by the hour parameter, an hour later during DST) if the\n * specified event does not occur on the date and returnTimeForNoEventCase is true. If\n * false, return whether the reason for no event is the sun being too high ('SUN_HIGH')\n * or too low ('SUN_LOW').\n * @param {DateTime} date The original date from which the event was calculated.\n * @param {string|undefined} errorCode The error code in case no event was found\n * @param {int} hour Hour to which the returned datetime should be set.\n * @param {int} minute Minute to which the returned datetime should be set.\n * @returns {(DateTime|string)} Time given by parameter 'hour' (+ correction for\n *     DST if applicable) or a string indicating why there was no event ('SUN_HIGH'\n *     or 'SUN_LOW')\n */\nconst handleNoEventCase = function (date, errorCode, hour, minute = 0) {\n    if (returnTimeForNoEventCase) {\n        const returnDate = date.set({ hour, minute, second: 0 }).plus({ minutes: date.isInDST ? 60 : 0 });\n        if (errorCode) {\n            returnDate.errorCode = errorCode;\n        }\n        return returnDate;\n    }\n    return errorCode;\n};\n\n/**\n * Calculates the approximate local hour angle of the sun at sunrise or sunset.\n * @param {number} phi Latitude (see AA p102 Eq15.1).\n * @param {number} delta Apparent declination of the sun.\n * @param {number} offset number of degrees below the horizon for the desired\n *     event (50/60 for sunrise/set, 6 for civil, 12 for nautical, 18 for\n *     astronomical dawn/dusk.\n * @returns {number} Approximate local hour angle.\n */\nconst approxLocalHourAngle = function (phi, delta, offset) {\n    const cosH0 = (auxMath.sind(-offset) -\n        auxMath.sind(phi) * auxMath.sind(delta)) /\n        (auxMath.cosd(phi) * auxMath.cosd(delta));\n    if (cosH0 < -1) {\n        throw noEventCodes.SUN_HIGH;\n    } else if (cosH0 > 1) {\n        throw noEventCodes.SUN_LOW;\n    }\n    return auxMath.rad2deg(Math.acos(cosH0));\n};\n\n/**\n * Normalizes a fractional time of day to be on the correct date.\n * @param {number} m Fractional time of day\n * @param {int} utcOffset Offset in minutes from UTC.\n * @returns {number} m Normalized m.\n */\nconst normalizeM = function (m, utcOffset) {\n    const localM = m + utcOffset / 1440;\n    if (localM < 0) {\n        return m + 1;\n    } else if (localM > 1) {\n        return m - 1;\n    }\n    return m;\n};\n\n/**\n * Calculates the correction for the solar transit time (see AA p103).\n * @param {number} T Fractional number of Julian centuries since\n *     2000-01-01T12:00:00Z.\n * @param {number} Theta0 Apparent sidereal time at Greenwich.\n * @param {number} DeltaT ΔT = TT − UT.\n * @param {number} L Longitude.\n * @param {number} m Fractional time of day of the event.\n * @returns {number} Currection for the solar transit time.\n */\nconst sunTransitCorrection = function (T, Theta0, DeltaT, L, m) {\n    const theta0 = Theta0 + 360.985647 * m;\n    const n = m + DeltaT / 864000;\n    const alpha = interpolatedRa(T, n);\n    const H = localHourAngle(theta0, L, alpha);\n    return -H / 360;\n};\n\n/**\n * Calculates the correction for the sunrise/sunset time (see AA p103).\n * @param {number} T Fractional number of Julian centuries since\n *     2000-01-01T12:00:00Z.\n * @param {number} Theta0 Apparent sidereal time at Greenwich.\n * @param {number} DeltaT ΔT = TT − UT.\n * @param {number} phi Latitude.\n * @param {number} L Longitude.\n * @param {number} m Fractional time of day of the event.\n * @param {number} offset number of degrees below the horizon for the desired\n *     event (50/60 for sunrise/set, 6 for civil, 12 for nautical, 18 for\n *     astronomical dawn/dusk.\n * @returns {number} Currection for the sunrise/sunset time.\n */\nconst sunRiseSetCorrection = function (T, Theta0, DeltaT, phi, L, m, offset) {\n    const theta0 = Theta0 + 360.985647 * m;\n    const n = m + DeltaT / 864000;\n    const alpha = interpolatedRa(T, n);\n    const delta = interpolatedDec(T, n);\n    const H = localHourAngle(theta0, L, alpha);\n    const h = altitude(phi, delta, H);\n    return (h + offset) / (360 * auxMath.cosd(delta) * auxMath.cosd(phi) * auxMath.sind(H));\n};\n\n/**\n * Calculates the local hour angle of the sun (see AA p103).\n * @param {number} theta0 Sidereal time at Greenwich in degrees.\n * @param {number} L Longitude.\n * @param {number} alpha Apparent right ascension of the sun.\n * @returns {number} Local hour angle of the sun.\n */\nconst localHourAngle = function (theta0, L, alpha) {\n    // Signflip for longitude\n    let H = auxMath.reduceAngle(theta0 + L - alpha);\n    if (H > 180) {\n        H -= 360;\n    }\n    return H;\n};\n\n/**\n * Calculates the altitude of the sun above the horizon (see AA P93 Eq13.6).\n * @param {number} phi Latitude.\n * @param {number} delta Apparent declination of the sun.\n * @param {number} H Local hour angle of the sun.\n * @returns {number} Altitude of the sun above the horizon.\n */\nconst altitude = function (phi, delta, H) {\n    return auxMath.rad2deg(Math.asin(\n        auxMath.sind(phi) * auxMath.sind(delta) + auxMath.cosd(phi) * auxMath.cosd(delta) * auxMath.cosd(H)));\n};\n\n/**\n * Interpolates the sun's right ascension (see AA p103).\n * @param {number} T Fractional number of Julian centuries since\n *     2000-01-01T12:00:00Z.\n * @param {number} n Fractional time of day of the event corrected by ΔT.\n * @returns {number} Interpolated right ascension.\n */\nconst interpolatedRa = function (T, n) {\n    const alpha1 = sunApparentRightAscension(T - (1 / 36525));\n    const alpha2 = sunApparentRightAscension(T);\n    const alpha3 = sunApparentRightAscension(T + (1 / 36525));\n    // I don't understand why the RA has to be interpolated with normalization\n    // but the Dec without, but the returned values are wrong otherwise...\n    const alpha = auxMath.interpolateFromThree(alpha1, alpha2, alpha3, n, true);\n    return auxMath.reduceAngle(alpha);\n};\n\n/**\n * Interpolates the sun's declination (see AA p103).\n * @param {number} T Fractional number of Julian centuries since\n *     2000-01-01T12:00:00Z.\n * @param {number} n Fractional time of day of the event corrected by ΔT.\n * @returns {number} Interpolated declination.\n */\nconst interpolatedDec = function (T, n) {\n    const delta1 = sunApparentDeclination(T - (1 / 36525));\n    const delta2 = sunApparentDeclination(T);\n    const delta3 = sunApparentDeclination(T + (1 / 36525));\n    const delta = auxMath.interpolateFromThree(delta1, delta2, delta3, n);\n    return auxMath.reduceAngle(delta);\n};\n\n/**\n * Calculates the apparent right ascension of the sun (see AA p165 Eq25.6).\n * @param {number} T Fractional number of Julian centuries since\n *     2000-01-01T12:00:00Z.\n * @returns {number} Apparent right ascension of the sun.\n */\nconst sunApparentRightAscension = function (T) {\n    const Omega = moonAscendingNodeLongitude(T);\n    const epsilon = trueObliquityOfEcliptic(T) + 0.00256 * auxMath.cosd(Omega);\n    const lambda = sunApparentLongitude(T);\n    const alpha = auxMath.rad2deg(Math.atan2(auxMath.cosd(epsilon) * auxMath.sind(lambda), auxMath.cosd(lambda)));\n    return auxMath.reduceAngle(alpha);\n};\n\n/**\n * Calculates the apparent declination of the sun (see AA p165 Eq25.7).\n * @param {number} T Fractional number of Julian centuries since\n *     2000-01-01T12:00:00Z.\n * @returns {number} Apparent declination of the sun.\n */\nconst sunApparentDeclination = function (T) {\n    const Omega = moonAscendingNodeLongitude(T);\n    const epsilon = trueObliquityOfEcliptic(T) + 0.00256 * auxMath.cosd(Omega);\n    const lambda = sunApparentLongitude(T);\n    return auxMath.rad2deg(Math.asin(auxMath.sind(epsilon) * auxMath.sind(lambda)));\n};\n\n/**\n * Calculates the apparent sidereal time at Greenwich (see AA p88).\n * @param {number} T Fractional number of Julian centuries since\n *     2000-01-01T12:00:00Z.\n * @returns {number} Apparent sidereal time at Greenwich\n */\nconst apparentSiderealTimeGreenwich = function (T) {\n    const theta0 = meanSiderealTimeGreenwich(T);\n    const epsilon = trueObliquityOfEcliptic(T);\n    const DeltaPsi = nutationInLongitude(T);\n    const theta = theta0 + DeltaPsi * auxMath.cosd(epsilon);\n    return auxMath.reduceAngle(theta);\n};\n\n/**\n * Calculates the mean sidereal time at Greenwich (see AA p88 Eq12.4).\n * @param {number} T Fractional number of Julian centuries since\n *     2000-01-01T12:00:00Z.\n * @returns {number} Mean sidereal time at Greenwich\n */\nconst meanSiderealTimeGreenwich = function (T) {\n    const JD2000 = T * 36525;\n    return 280.46061837 + 360.98564736629 * JD2000 + 0.000387933 * T * T - T * T * T / 38710000;\n};\n\n/**\n * Calculates the true obliquity of the ecliptic (see AA p147).\n * @param {number} T Fractional number of Julian centuries since\n *     2000-01-01T12:00:00Z.\n * @returns {number} True obliquity of the ecliptic.\n */\nconst trueObliquityOfEcliptic = function (T) {\n    const epsilon0 = meanObliquityOfEcliptic(T);\n    const DeltaEpsilon = nutationInObliquity(T);\n    return epsilon0 + DeltaEpsilon;\n};\n\n/**\n * Calculates the mean obliquity of the ecliptic (see AA p147 Eq 22.3).\n * @param {number} T Fractional number of Julian centuries since\n *     2000-01-01T12:00:00Z.\n * @returns {number} Mean obliquity of the ecliptic.\n */\nconst meanObliquityOfEcliptic = function (T) {\n    const U = T / 100;\n    return auxMath.polynomial(U, constants.meanObliquityOfEcliptic);\n};\n\n/**\n * Calculates the apparent longitude of the sun (see AA p164).\n * @param {number} T Fractional number of Julian centuries since\n *     2000-01-01T12:00:00Z.\n * @returns {number} Apparent longitude of the sun.\n */\nconst sunApparentLongitude = function (T) {\n    const Sol = sunTrueLongitude(T);\n    const Omega = moonAscendingNodeLongitude(T);\n    return Sol - 0.00569 - 0.00478 * auxMath.sind(Omega);\n};\n\n/**\n * Calculates the true longitude of the sun (see AA p164).\n * @param {number} T Fractional number of Julian centuries since\n *     2000-01-01T12:00:00Z.\n * @returns {number} True longitude of the sun.\n */\nconst sunTrueLongitude = function (T) {\n    const L0 = sunMeanLongitude(T);\n    const C = sunEquationOfCenter(T);\n    return L0 + C;\n};\n\n/**\n * Calculates the equation of center of the sun (see AA p164).\n * @param {number} T Fractional number of Julian centuries since\n *     2000-01-01T12:00:00Z.\n * @returns {number} Equation of center of the sun.\n */\nconst sunEquationOfCenter = function (T) {\n    const M = sunMeanAnomaly(T);\n    return (1.914602 - 0.004817 * T - 0.000014 * T * T) * auxMath.sind(M) +\n        (0.019993 - 0.000101 * T) * auxMath.sind(2 * M) + 0.000290 * auxMath.sind(3 * M);\n};\n\n/**\n * Calculates the nutation in longitude of the sun (see AA p144ff).\n * @param {number} T Fractional number of Julian centuries since\n *     2000-01-01T12:00:00Z.\n * @returns {number} Nutation in longitude of the sun.\n */\nconst nutationInLongitude = function (T) {\n    const D = moonMeanElongation(T);\n    const M = sunMeanAnomaly(T);\n    const MPrime = moonMeanAnomaly(T);\n    const F = moonArgumentOfLatitude(T);\n    const Omega = moonAscendingNodeLongitude(T);\n    let DeltaPsi = 0;\n    let sineArg;\n    for (let i = 0; i < 63; i++) {\n        sineArg = constants.nutations[i][0] * D + constants.nutations[i][1] * M + constants.nutations[i][2] * MPrime +\n            constants.nutations[i][3] * F + constants.nutations[i][4] * Omega;\n        DeltaPsi += (constants.nutations[i][5] + constants.nutations[i][6] * T) * auxMath.sind(sineArg);\n    }\n    return DeltaPsi / 36000000;\n};\n\n/**\n * Calculates the nutation in obliquity of the sun (see AA p144ff).\n * @param {number} T Fractional number of Julian centuries since\n *     2000-01-01T12:00:00Z.\n * @returns {number} Nutation in obliquity of the sun.\n */\nconst nutationInObliquity = function (T) {\n    const D = moonMeanElongation(T);\n    const M = sunMeanAnomaly(T);\n    const MPrime = moonMeanAnomaly(T);\n    const F = moonArgumentOfLatitude(T);\n    const Omega = moonAscendingNodeLongitude(T);\n    let DeltaEpsilon = 0;\n    let cosArg;\n    for (let i = 0; i < 63; i++) {\n        cosArg = constants.nutations[i][0] * D + constants.nutations[i][1] * M + constants.nutations[i][2] * MPrime +\n            constants.nutations[i][3] * F + constants.nutations[i][4] * Omega;\n        DeltaEpsilon += (constants.nutations[i][7] + constants.nutations[i][8] * T) * auxMath.cosd(cosArg);\n    }\n    return DeltaEpsilon / 36000000;\n};\n\n/**\n * Calculates the argument of latitude of the moon (see AA p144).\n * @param {number} T Fractional number of Julian centuries since\n *     2000-01-01T12:00:00Z.\n * @returns {number} Argument of latitude of the moon.\n */\nconst moonArgumentOfLatitude = function (T) {\n    const F = auxMath.polynomial(T, constants.moonArgumentOfLatitude);\n    return auxMath.reduceAngle(F);\n};\n\n/**\n * Calculates the longitude of the ascending node of the Moon's mean orbit on\n * the ecliptic, measured from the mean equinox of the datea (see AA p144).\n * @param {number} T Fractional number of Julian centuries since\n *     2000-01-01T12:00:00Z.\n * @returns {number} Longitude of the asc. node of the moon's mean orbit.\n */\nconst moonAscendingNodeLongitude = function (T) {\n    const Omega = auxMath.polynomial(T, constants.moonAscendingNodeLongitude);\n    return auxMath.reduceAngle(Omega);\n};\n\n/**\n * Calculates the mean anomaly of the moon (see AA p144).\n * @param {number} T Fractional number of Julian centuries since\n *     2000-01-01T12:00:00Z.\n * @returns {number} Mean anomaly of the moon.\n */\nconst moonMeanAnomaly = function (T) {\n    const MPrime = auxMath.polynomial(T, constants.moonMeanAnomaly);\n    return auxMath.reduceAngle(MPrime);\n};\n\n/**\n * Calculates the mean elongation of the moon from the sun (see AA p144).\n * @param {number} T Fractional number of Julian centuries since\n *     2000-01-01T12:00:00Z.\n * @returns {number} Mean elongation of the moon from the sun.\n */\nconst moonMeanElongation = function (T) {\n    const D = auxMath.polynomial(T, constants.moonMeanElongation);\n    return auxMath.reduceAngle(D);\n};\n\n/**\n * Calculates the mean anomaly of the sun (see AA p144).\n * @param {number} T Fractional number of Julian centuries since\n *     2000-01-01T12:00:00Z.\n * @returns {number} Mean anomaly of the sun.\n */\nconst sunMeanAnomaly = function (T) {\n    const M = auxMath.polynomial(T, constants.sunMeanAnomaly);\n    return auxMath.reduceAngle(M);\n};\n\n/**\n * Calculates the mean longitude of the sun referred to the mean equinox of the\n * date (see AA p163).\n * @param {number} T Fractional number of Julian centuries since\n *     2000-01-01T12:00:00Z.\n * @returns {number} Mean longitude of the sun referred to the mean equinox of\n *     the date.\n */\nconst sunMeanLongitude = function (T) {\n    const L0 = auxMath.polynomial(T, constants.sunMeanLongitude);\n    return auxMath.reduceAngle(L0);\n};\n\nconst noEventCodes = {\n    MIDNIGHT_SUN: 'MIDNIGHT_SUN',\n    NO_ASTRONOMICAL_DAWN: 'NO_ASTRONOMICAL_DAWN',\n    NO_ASTRONOMICAL_DUSK: 'NO_ASTRONOMICAL_DUSK',\n    NO_CIVIL_DAWN: 'NO_CIVIL_DAWN',\n    NO_CIVIL_DUSK: 'NO_CIVIL_DUSK',\n    NO_NAUTICAL_DAWN: 'NO_NAUTICAL_DAWN',\n    NO_NAUTICAL_DUSK: 'NO_NAUTICAL_DUSK',\n    POLAR_NIGHT: 'POLAR_NIGHT',\n    SUN_HIGH: 'SUN_HIGH',\n    SUN_LOW: 'SUN_LOW',\n};\n\nexport { sunRiseSet, sunTransit, handleNoEventCase };\n","import * as auxMath from './auxMath.js';\nimport * as timeConversions from './timeConversions.js';\n\n/**\n * Calculates the Julian date in ephemeris time of the moon near the date\n * corresponding to k (see AA p350ff).\n * @param {number} k The approximate fractional number of new moons since\n *     2000-01-06.\n * @param {int} phase 0 -> new moon, 1 -> first quarter,\n *                    2 -> full moon, 3 -> last quarter.\n * @returns {number} Julian date in ephemeris time of the moon of given phase.\n */\nconst truePhase = function (k, phase) {\n    k += phase / 4;\n    const T = timeConversions.kToT(k);\n    const E = eccentricityCorrection(T);\n    const JDE = meanPhase(T, k);\n    const M = sunMeanAnomaly(T, k);\n    const MPrime = moonMeanAnomaly(T, k);\n    const F = moonArgumentOfLatitude(T, k);\n    const Omega = moonAscendingNodeLongitude(T, k);\n    const A = planetaryArguments(T, k);\n    let DeltaJDE = 0;\n    if (phase === 0 || phase === 2) {\n        DeltaJDE += newMoonFullMoonCorrections(E, M, MPrime, F, Omega, phase);\n    } else if (phase === 1 || phase === 3) {\n        DeltaJDE += quarterCorrections(E, M, MPrime, F, Omega, phase);\n    }\n    DeltaJDE += commonCorrections(A);\n    return JDE + DeltaJDE;\n};\n\n/**\n * Calculates the mean phase of the moon as Julian date in ephemeris time (see\n * AA p349 Eq49.1).\n * @param {number} T Fractional number of Julian centuries since\n *     2000-01-01T12:00:00Z.\n * @param {number} k The approximate fractional number of new moons since\n *     2000-01-06.\n * @returns {number} Julian date in ephemeris time of the moon of given mean\n *     phase.\n */\nconst meanPhase = function (T, k) {\n    return 2451550.09766 + 29.530588861 * k + 0.00015437 * T * T - 0.000000150 * T * T * T +\n        0.00000000073 * T * T * T * T;\n};\n\n/**\n * Calculates the mean anomaly of the sun (see AA p350 Eq49.4).\n * @param {number} T Fractional number of Julian centuries since\n *     2000-01-01T12:00:00Z.\n * @param {number} k The approximate fractional number of new moons since\n *     2000-01-06.\n * @returns {number} Mean anomaly of the sun at the given time.\n */\nconst sunMeanAnomaly = function (T, k) {\n    return 2.5534 + 29.10535670 * k - 0.0000014 * T * T - 0.00000011 * T * T * T;\n};\n\n/**\n * Calculates the mean anomaly of the moon (see AA p350 Eq49.5).\n * @param {number} T Fractional number of Julian centuries since\n *     2000-01-01T12:00:00Z.\n * @param {number} k The approximate fractional number of new moons since\n *     2000-01-06.\n * @returns {number} Mean anomaly of the moon at the given time.\n */\nconst moonMeanAnomaly = function (T, k) {\n    return 201.5643 + 385.81693528 * k + 0.0107582 * T * T + 0.00001238 * T * T * T - 0.000000058 * T * T * T * T;\n};\n\n/**\n * Calculates the argument of latitude of the moon (see AA p350 Eq49.6).\n * @param {number} T Fractional number of Julian centuries since\n *     2000-01-01T12:00:00Z.\n * @param {number} k The approximate fractional number of new moons since\n *     2000-01-06.\n * @returns {number} Argument of latitude of the moon at the given time.\n */\nconst moonArgumentOfLatitude = function (T, k) {\n    return 160.7108 + 390.67050284 * k - 0.0016118 * T * T - 0.00000227 * T * T * T + 0.000000011 * T * T * T * T;\n};\n\n/**\n * Calculates the longitude of the ascending node of the lunar orbit (see AA\n * p350 Eq49.7).\n * @param {number} T Fractional number of Julian centuries since\n *     2000-01-01T12:00:00Z.\n * @param {number} k The approximate fractional number of new moons since\n *     2000-01-06.\n * @returns {number} Longitude of the ascending node of the lunar orbit at the\n *     given time.\n */\nconst moonAscendingNodeLongitude = function (T, k) {\n    return 124.7746 - 1.56375588 * k + 0.0020672 * T * T + 0.00000215 * T * T * T;\n};\n\n/**\n * Calculates the correction for the eccentricity of the earth's orbit.\n * @param {number} T Fractional number of Julian centuries since\n *     2000-01-01T12:00:00Z.\n * @returns {number} Eccentricity correction.\n */\nconst eccentricityCorrection = function (T) {\n    return 1 - 0.002516 * T - 0.0000074 * T * T;\n};\n\n/**\n * Calculates the planetary arguments for the moon phases (see AA p351).\n * @param {number} T Fractional number of Julian centuries since\n *     2000-01-01T12:00:00Z.\n * @param {number} k The approximate fractional number of new moons since\n *     2000-01-06.\n * @returns {array} Planetary arguments for the moon phases.\n */\nconst planetaryArguments = function (T, k) {\n    // Want to follow the numbering conventions from AA\n    return [\n        0,\n        299.77 + 0.107408 * k - 0.009173 * T * T,\n        251.88 + 0.016321 * k,\n        251.83 + 26.651886 * k,\n        349.42 + 36.412478 * k,\n        84.66 + 18.206239 * k,\n        141.74 + 53.303771 * k,\n        207.14 + 2.453732 * k,\n        154.84 + 7.306860 * k,\n        34.52 + 27.261239 * k,\n        207.19 + 0.121824 * k,\n        291.34 + 1.844379 * k,\n        161.72 + 24.198154 * k,\n        239.56 + 25.513099 * k,\n        331.55 + 3.592518 * k,\n    ];\n};\n\n/**\n * Calculates the corrections to the planetary arguments for the moon phases\n * that are common to all phases (see AA p352).\n * @param {array} A Array of planetary arguments\n * @returns {number} Correction to the Julian date in ephemeris time for the\n *     moon phase.\n */\nconst commonCorrections = function (A) {\n    return 0.000325 * auxMath.sind(A[1]) +\n        0.000165 * auxMath.sind(A[2]) +\n        0.000164 * auxMath.sind(A[3]) +\n        0.000126 * auxMath.sind(A[4]) +\n        0.000110 * auxMath.sind(A[5]) +\n        0.000062 * auxMath.sind(A[6]) +\n        0.000060 * auxMath.sind(A[7]) +\n        0.000056 * auxMath.sind(A[8]) +\n        0.000047 * auxMath.sind(A[9]) +\n        0.000042 * auxMath.sind(A[10]) +\n        0.000040 * auxMath.sind(A[11]) +\n        0.000037 * auxMath.sind(A[12]) +\n        0.000035 * auxMath.sind(A[13]) +\n        0.000023 * auxMath.sind(A[14]);\n};\n\n/**\n * Calculates the corrections to the planetary arguments for the moon phases\n * for full and new moons (see AA p351).\n * @param {number} E Correction for the eccentricity of the earth's orbit.\n * @param {number} M Mean anomaly of the sun.\n * @param {number} MPrime Mean anomaly of the moon.\n * @param {number} F Argument of latitude of the moon.\n * @param {number} Omega Longitude of the ascending node of the lunar orbit.\n * @param {int} phase 0 -> new moon, 1 -> first quarter,\n *                    2 -> full moon, 3 -> last quarter.\n * @returns {number} Correction to the Julian date in ephemeris time for the\n *     moon phase.\n */\nconst newMoonFullMoonCorrections = function (E, M, MPrime, F, Omega, phase) {\n    let DeltaJDE =\n        -0.00111 * auxMath.sind(MPrime - 2 * F) -\n        0.00057 * auxMath.sind(MPrime + 2 * F) +\n        0.00056 * E * auxMath.sind(2 * MPrime + M) -\n        0.00042 * auxMath.sind(3 * MPrime) +\n        0.00042 * E * auxMath.sind(M + 2 * F) +\n        0.00038 * E * auxMath.sind(M - 2 * F) -\n        0.00024 * E * auxMath.sind(2 * MPrime - M) -\n        0.00017 * auxMath.sind(Omega) -\n        0.00007 * auxMath.sind(MPrime + 2 * M) +\n        0.00004 * auxMath.sind(2 * MPrime - 2 * F) +\n        0.00004 * auxMath.sind(3 * M) +\n        0.00003 * auxMath.sind(MPrime + M - 2 * F) +\n        0.00003 * auxMath.sind(2 * MPrime + 2 * F) -\n        0.00003 * auxMath.sind(MPrime + M + 2 * F) +\n        0.00003 * auxMath.sind(MPrime - M + 2 * F) -\n        0.00002 * auxMath.sind(MPrime - M - 2 * F) -\n        0.00002 * auxMath.sind(3 * MPrime + M) +\n        0.00002 * auxMath.sind(4 * MPrime);\n    if (phase === 0) {\n        DeltaJDE +=\n            -0.40720 * auxMath.sind(MPrime) +\n            0.17241 * E * auxMath.sind(M) +\n            0.01608 * auxMath.sind(2 * MPrime) +\n            0.01039 * auxMath.sind(2 * F) +\n            0.00739 * E * auxMath.sind(MPrime - M) -\n            0.00514 * E * auxMath.sind(MPrime + M) +\n            0.00208 * E * E * auxMath.sind(2 * M);\n    } else if (phase === 2) {\n        DeltaJDE +=\n            -0.40614 * auxMath.sind(MPrime) +\n            0.17302 * E * auxMath.sind(M) +\n            0.01614 * auxMath.sind(2 * MPrime) +\n            0.01043 * auxMath.sind(2 * F) +\n            0.00734 * E * auxMath.sind(MPrime - M) -\n            0.00515 * E * auxMath.sind(MPrime + M) +\n            0.00209 * E * E * auxMath.sind(2 * M);\n    }\n    return DeltaJDE;\n};\n\n/**\n * Calculates the corrections to the planetary arguments for the moon phases\n * for first and last quarters (see AA p352).\n * @param {number} E Correction for the eccentricity of the earth's orbit.\n * @param {number} M Mean anomaly of the sun.\n * @param {number} MPrime Mean anomaly of the moon.\n * @param {number} F Argument of latitude of the moon.\n * @param {number} Omega Longitude of the ascending node of the lunar orbit.\n * @param {int} phase 0 -> new moon, 1 -> first quarter,\n *                    2 -> full moon, 3 -> last quarter.\n * @returns {number} Correction to the Julian date in ephemeris time for the\n *     moon phase.\n */\nconst quarterCorrections = function (E, M, MPrime, F, Omega, phase) {\n    let DeltaJDE =\n        -0.62801 * auxMath.sind(MPrime) +\n        0.17172 * E * auxMath.sind(M) -\n        0.01183 * E * auxMath.sind(MPrime + M) +\n        0.00862 * auxMath.sind(2 * MPrime) +\n        0.00804 * auxMath.sind(2 * F) +\n        0.00454 * E * auxMath.sind(MPrime - M) +\n        0.00204 * E * E * auxMath.sind(2 * M) -\n        0.00180 * auxMath.sind(MPrime - 2 * F) -\n        0.00070 * auxMath.sind(MPrime + 2 * F) -\n        0.00040 * auxMath.sind(3 * MPrime) -\n        0.00034 * E * auxMath.sind(2 * MPrime - M) +\n        0.00032 * E * auxMath.sind(M + 2 * F) +\n        0.00032 * E * auxMath.sind(M - 2 * F) -\n        0.00028 * E * E * auxMath.sind(MPrime + 2 * M) +\n        0.00027 * E * auxMath.sind(2 * MPrime + M) -\n        0.00017 * auxMath.sind(Omega) -\n        0.00005 * auxMath.sind(MPrime - M - 2 * F) +\n        0.00004 * auxMath.sind(2 * MPrime + 2 * F) -\n        0.00004 * auxMath.sind(MPrime + M + 2 * F) +\n        0.00004 * auxMath.sind(MPrime - 2 * M) +\n        0.00003 * auxMath.sind(MPrime + M - 2 * F) +\n        0.00003 * auxMath.sind(3 * M) +\n        0.00002 * auxMath.sind(2 * MPrime - 2 * F) +\n        0.00002 * auxMath.sind(MPrime - M + 2 * F) -\n        0.00002 * auxMath.sind(3 * MPrime + M);\n    const W =\n        0.00306 -\n        0.00038 * E * auxMath.cosd(M) +\n        0.00026 * auxMath.cosd(MPrime) -\n        0.00002 * auxMath.cosd(MPrime - M) +\n        0.00002 * auxMath.cosd(MPrime + M) +\n        0.00002 * auxMath.cosd(2 * F);\n    if (phase === 1) {\n        DeltaJDE += W;\n    } else if (phase === 3) {\n        DeltaJDE -= W;\n    }\n    return DeltaJDE;\n};\n\nexport { truePhase };\n","import * as luxon from 'luxon';\nimport { DeltaT, JDToDatetime, approxK } from './timeConversions';\nimport { handleNoEventCase, sunRiseSet, sunTransit } from './sunTimes';\nimport { truePhase } from './moonPhases';\n\nlet roundToNearestMinute = false;\nlet returnTimeForNoEventCase = false;\nlet dateFormatKeys = {\n    SUN_HIGH: '‡',\n    SUN_LOW: '†',\n};\n\n/**\n * Sets options (roundToNearestMinute, returnTimeForNoEventCase, dateFormatKey) for the\n * module.\n * @param {object} options Options to be set.\n */\nconst options = function (options) {\n    if (typeof options.roundToNearestMinute === 'boolean') {\n        roundToNearestMinute = options.roundToNearestMinute;\n    }\n    if (typeof options.returnTimeForNoEventCase === 'boolean') {\n        returnTimeForNoEventCase = options.returnTimeForNoEventCase;\n    }\n    if (typeof options.dateFormatKeys === 'object') {\n        dateFormatKeys = options.dateFormatKeys;\n    }\n};\n\n/**\n * Uses the extra information encoded into the DateTime object for dates without\n * a sun event if returnTimeForNoEventCase is true to mark the output string.\n * @param {DateTime} datetime Input datetime.\n * @param {string} formatString Valid DateTime format string.\n * @returns {string} Formatted string with marker appended.\n */\nconst formatCI = function (datetime, formatString) {\n    const noEventCode = datetime.errorCode;\n    let datestring = datetime.toFormat(formatString);\n    if (dateFormatKeys[noEventCode]) {\n        datestring += dateFormatKeys[noEventCode];\n    }\n    return datestring;\n};\n\n/**\n * Calculates sunrise on the provided date.\n * @param {DateTime} datetime Datetime for which sunrise is calculated. Should\n *     always contain a timezone or be in UTC, lone UTC offsets might lead to\n *     unexpected behaviour.\n * @param {number} phi Latitude of target location.\n * @param {number} L longitude of target location.\n * @returns {(DateTime|string)} Time of sunrise or a string indicating that no\n *     event could be calculated as the sun was too high ('SUN_HIGH') or too low\n *     ('SUN_LOW') during the entire day (unless returnTimeForNoEventCase is true).\n */\nconst sunrise = function (datetime, phi, L) {\n    try {\n        return sunRiseSet(datetime, phi, L, 'RISE');\n    } catch (err) {\n        return handleNoEventCase(datetime, err, 6);\n    }\n};\n\n/**\n * Calculates sunset on the provided date.\n * @param {DateTime} datetime Datetime for which sunset is calculated. Should\n *     always contain a timezone or be in UTC, lone UTC offsets might lead to\n *     unexpected behaviour.\n * @param {number} phi Latitude of target location.\n * @param {number} L longitude of target location.\n * @returns {(DateTime|string)} Time of sunset or a string indicating that no\n *     event could be calculated as the sun was too high ('SUN_HIGH') or too low\n *     ('SUN_LOW') during the entire day (unless returnTimeForNoEventCase is true).\n */\nconst sunset = function (datetime, phi, L) {\n    try {\n        return sunRiseSet(datetime, phi, L, 'SET');\n    } catch (err) {\n        return handleNoEventCase(datetime, err, 18);\n    }\n};\n\n/**\n * Calculates civil dawn (sun 6° below horizon) on the provided date.\n * @param {DateTime} datetime Datetime for which civil dawn is calculated. Should\n *     always contain a timezone or be in UTC, lone UTC offsets might lead to\n *     unexpected behaviour.\n * @param {number} phi Latitude of target location.\n * @param {number} L longitude of target location.\n * @returns {(DateTime|string)} Time of civil dawn or a string indicating that no\n *     event could be calculated as the sun was too high ('SUN_HIGH') or too low\n *     ('SUN_LOW') during the entire day (unless returnTimeForNoEventCase is true).\n */\nconst civilDawn = function (datetime, phi, L) {\n    try {\n        return sunRiseSet(datetime, phi, L, 'RISE', 6);\n    } catch (err) {\n        return handleNoEventCase(datetime, err, 5, 30);\n    }\n};\n\n/**\n * Calculates civil dusk (sun 6° below horizon) on the provided date.\n * @param {DateTime} datetime Datetime for which civil dusk is calculated. Should\n *     always contain a timezone or be in UTC, lone UTC offsets might lead to\n *     unexpected behaviour.\n * @param {number} phi Latitude of target location.\n * @param {number} L longitude of target location.\n * @returns {(DateTime|string)} Time of civil dusk or a string indicating that no\n *     event could be calculated as the sun was too high ('SUN_HIGH') or too low\n *     ('SUN_LOW') during the entire day (unless returnTimeForNoEventCase is true).\n */\nconst civilDusk = function (datetime, phi, L) {\n    try {\n        return sunRiseSet(datetime, phi, L, 'SET', 6);\n    } catch (err) {\n        return handleNoEventCase(datetime, err, 18, 30);\n    }\n};\n\n/**\n * Calculates nautical dawn (sun 12° below horizon) on the provided date.\n * @param {DateTime} datetime Datetime for which nautical dawn is calculated.\n *     Should always contain a timezone or be in UTC, lone UTC offsets might\n *     lead to unexpected behaviour.\n * @param {number} phi Latitude of target location.\n * @param {number} L longitude of target location.\n * @returns {(DateTime|string)} Time of nautical dawn or a string indicating that no\n *     event could be calculated as the sun was too high ('SUN_HIGH') or too low\n *     ('SUN_LOW') during the entire day (unless returnTimeForNoEventCase is true).\n */\nconst nauticalDawn = function (datetime, phi, L) {\n    try {\n        return sunRiseSet(datetime, phi, L, 'RISE', 12);\n    } catch (err) {\n        return handleNoEventCase(datetime, err, 5);\n    }\n};\n\n/**\n * Calculates nautical dusk (sun 12° below horizon) on the provided date.\n * @param {DateTime} datetime Datetime for which nautical dusk is calculated.\n *     Should always contain a timezone or be in UTC, lone UTC offsets might\n *     lead to unexpected behaviour.\n * @param {number} phi Latitude of target location.\n * @param {number} L longitude of target location.\n * @returns {(DateTime|string)} Time of nautical dusk or a string indicating that no\n *     event could be calculated as the sun was too high ('SUN_HIGH') or too low\n *     ('SUN_LOW') during the entire day (unless returnTimeForNoEventCase is true).\n */\nconst nauticalDusk = function (datetime, phi, L) {\n    try {\n        return sunRiseSet(datetime, phi, L, 'SET', 12);\n    } catch (err) {\n        return handleNoEventCase(datetime, err, 19);\n    }\n};\n\n/**\n * Calculates astronomical dawn (sun 18° below horizon) on the provided date.\n * @param {DateTime} datetime Datetime for which astronomical dawn is calculated.\n *     Should always contain a timezone or be in UTC, lone UTC offsets might\n *     lead to unexpected behaviour.\n * @param {number} phi Latitude of target location.\n * @param {number} L longitude of target location.\n * @returns {(DateTime|string)} Time of astronomical dawn or a string indicating that no\n *     event could be calculated as the sun was too high ('SUN_HIGH') or too low\n *     ('SUN_LOW') during the entire day (unless returnTimeForNoEventCase is true).\n */\nconst astronomicalDawn = function (datetime, phi, L) {\n    try {\n        return sunRiseSet(datetime, phi, L, 'RISE', 18);\n    } catch (err) {\n        return handleNoEventCase(datetime, err, 4, 30);\n    }\n};\n\n/**\n * Calculates astronomical dusk (sun 18° below horizon) on the provided date.\n * @param {DateTime} datetime Datetime for which astronomical dusk is calculated.\n *     Should always contain a timezone or be in UTC, lone UTC offsets might\n *     lead to unexpected behaviour.\n * @param {number} phi Latitude of target location.\n * @param {number} L longitude of target location.\n * @returns {(DateTime|string)} Time of astronomical dusk or a string indicating that no\n *     event could be calculated as the sun was too high ('SUN_HIGH') or too low\n *     ('SUN_LOW') during the entire day (unless returnTimeForNoEventCase is true).\n */\nconst astronomicalDusk = function (datetime, phi, L) {\n    try {\n        return sunRiseSet(datetime, phi, L, 'SET', 18);\n    } catch (err) {\n        return handleNoEventCase(datetime, err, 19, 30);\n    }\n};\n\n/**\n * Calculates solar noon on the provided date.\n * @param {DateTime} datetime Datetime for which solar noon is calculated. Should\n *     always contain a timezone or be in UTC, lone UTC offsets might lead to\n *     unexpected behaviour.\n * @param {number} L longitude of target location.\n * @returns {DateTime} Time of solar noon at the given longitude.\n */\nconst solarNoon = function (datetime, L) {\n    return sunTransit(datetime, L);\n};\n\n/**\n * Calculates all moons of the given phase that occur within the given\n * Gregorian calendar year.\n * @param {int} year Year for which moon phases should be calculated.\n * @param {int} phase 0 -> new moon, 1 -> first quarter,\n *                    2 -> full moon, 3 -> last quarter.\n * @param {string} timezone Optional: IANA timezone string.\n * @returns {array} Array of moment objects for moons of the given phase.\n */\nconst yearMoonPhases = function (year, phase, timezone = 'UTC') {\n    const yearBegin = luxon.DateTime.fromObject(\n        // eslint-disable-next-line sort-keys\n        { year, month: 1, day: 1, hour: 0, minute: 0, second: 0, zone: timezone });\n    const yearEnd = luxon.DateTime.fromObject(\n        // eslint-disable-next-line sort-keys\n        { year: year + 1, month: 1, day: 1, hour: 0, minute: 0, second: 0, zone: timezone });\n    // this will give us k for the first new moon of the year or earlier\n    let k = Math.floor(approxK(yearBegin)) - 1;\n    // taking 15 events will make sure we catch every event in the year\n    const phaseTimes = [];\n    let JDE;\n    let moonDatetime;\n    let deltaT;\n    for (let i = 0; i < 15; i++) {\n        JDE = truePhase(k, phase);\n        // we pretend it's JD and not JDE\n        moonDatetime = JDToDatetime(JDE).setZone(timezone);\n        // now use that to calculate deltaT\n        deltaT = DeltaT(moonDatetime);\n        if (deltaT > 0) {\n            moonDatetime = moonDatetime.minus({ seconds: Math.abs(deltaT) });\n        } else {\n            moonDatetime = moonDatetime.plus({ seconds: Math.abs(deltaT) });\n        }\n        if (roundToNearestMinute) {\n            moonDatetime = moonDatetime.plus({ seconds: 30 }).set({ second: 0 });\n        }\n        if (moonDatetime >= yearBegin && moonDatetime < yearEnd) {\n            phaseTimes.push(moonDatetime);\n        }\n        k++;\n    }\n    return phaseTimes;\n};\n\nexport {\n    options, formatCI, sunrise, sunset, civilDawn, civilDusk, nauticalDawn, nauticalDusk, astronomicalDawn,\n    astronomicalDusk, solarNoon, yearMoonPhases, roundToNearestMinute, returnTimeForNoEventCase,\n};\n"],"names":["JDToDatetime","JD","Z","Math","floor","F","A","alpha","B","C","D","E","fracDay","day","hour","minute","second","month","year","luxon.DateTime","fromISO","zone","set","datetimeToT","datetime","Y","M","datetimeToJD","DeltaT","u","t","y","deg2rad","deg","rad2deg","rad","sind","sin","cosd","cos","reduceAngle","angle","polynomial","variable","coeffs","varPower","sum","numCoeffs","length","i","interpolateFromThree","y1","y2","y3","n","normalize","a","b","sunMeanAnomaly","sunMeanLongitude","meanObliquityOfEcliptic","moonArgumentOfLatitude","moonAscendingNodeLongitude","moonMeanAnomaly","moonMeanElongation","nutations","sunRiseSet","phi","L","flag","offset","timezone","suntime","setZone","keepLocalTime","timeConversions.DeltaT","T","timeConversions.datetimeToT","Theta0","apparentSiderealTimeGreenwich","TD","sunApparentRightAscension","delta","sunApparentDeclination","H0","approxLocalHourAngle","m","m0","normalizeM","counter","DeltaM","abs","sunRiseSetCorrection","plus","seconds","minus","roundToNearestMinute","handleNoEventCase","date","errorCode","returnTimeForNoEventCase","returnDate","minutes","isInDST","cosH0","auxMath.sind","auxMath.cosd","noEventCodes","SUN_HIGH","SUN_LOW","auxMath.rad2deg","acos","utcOffset","localM","sunTransitCorrection","theta0","interpolatedRa","localHourAngle","interpolatedDec","H","altitude","auxMath.reduceAngle","asin","alpha1","alpha2","alpha3","auxMath.interpolateFromThree","delta1","delta2","delta3","Omega","epsilon","trueObliquityOfEcliptic","lambda","sunApparentLongitude","atan2","meanSiderealTimeGreenwich","theta","nutationInLongitude","nutationInObliquity","auxMath.polynomial","constants.meanObliquityOfEcliptic","Sol","sunTrueLongitude","sunEquationOfCenter","MPrime","sineArg","DeltaPsi","constants.nutations","cosArg","DeltaEpsilon","constants.moonArgumentOfLatitude","constants.moonAscendingNodeLongitude","constants.moonMeanAnomaly","constants.moonMeanElongation","constants.sunMeanAnomaly","L0","constants.sunMeanLongitude","MIDNIGHT_SUN","NO_ASTRONOMICAL_DAWN","NO_ASTRONOMICAL_DUSK","NO_CIVIL_DAWN","NO_CIVIL_DUSK","NO_NAUTICAL_DAWN","NO_NAUTICAL_DUSK","POLAR_NIGHT","truePhase","k","phase","timeConversions.kToT","eccentricityCorrection","JDE","meanPhase","planetaryArguments","DeltaJDE","newMoonFullMoonCorrections","quarterCorrections","commonCorrections","W","dateFormatKeys","options","formatCI","formatString","noEventCode","datestring","toFormat","sunrise","err","sunset","civilDawn","civilDusk","nauticalDawn","nauticalDusk","astronomicalDawn","astronomicalDusk","solarNoon","transit","sunTransit","yearMoonPhases","yearBegin","fromObject","yearEnd","phaseTimes","moonDatetime","deltaT","push"],"mappings":"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"}