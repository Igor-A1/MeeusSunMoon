{"version":3,"file":"meeussunmoon.min.js","sources":["../src/auxMath.js","../src/timeConversions.js","../src/moonPhases.js","../src/constants.js","../src/sunTimes.js","../src/index.js"],"sourcesContent":["/**\n * Converts angles in degrees to radians.\n * @param {number} deg Angle in degrees.\n * @returns {number} Angle in radians.\n */\nconst deg2rad = function (deg) {\n  return deg * 0.017453292519943295;\n};\n\n/**\n * Converts angles in radians to degrees.\n * @param {number} rad Angle in radians.\n * @returns {number} Angle in degrees.\n */\nconst rad2deg = function (rad) {\n  return rad * 57.29577951308232;\n};\n\n/**\n * Calculates the sine of an angle given in degrees.\n * @param {number} deg Angle in degrees.\n * @returns {number} Sine of the angle.\n */\nconst sind = function (deg) {\n  return Math.sin(deg2rad(deg));\n};\n\n/**\n * Calculates the cosine of an angle given in degrees.\n * @param {number} deg Angle in degrees.\n * @returns {number} Cosine of the angle.\n */\nconst cosd = function (deg) {\n  return Math.cos(deg2rad(deg));\n};\n\n/**\n * Reduces an angle to the interval 0-360°.\n * @param {number} angle Angle in degrees.\n * @returns {number} Reduced angle in degrees.\n */\nconst reduceAngle = function (angle) {\n  return angle - (360 * Math.floor(angle / 360));\n};\n\n/**\n * Takes the modulo of a number using floored division.\n * @param {number} a Original number.\n * @param {number} n divisor.\n * @returns {number} a mod n.\n */\nconst modulo = function (a, n) {\n  return a - n * (Math.floor(a / n));\n};\n\n/**\n * Evaluates a polynomial in the form A + Bx + Cx^2...\n * @param {number} variable Value of x in the polynomial.\n * @param {array} coeffs Array of coefficients [A, B, C...].\n * @returns {number} Sum of the polynomial.\n */\nconst polynomial = function (variable, coeffs) {\n  let varPower = 1;\n  let sum = 0.0;\n  const numCoeffs = coeffs.length;\n  for (let i = 0; i < numCoeffs; i++) {\n    sum += varPower * coeffs[i];\n    varPower *= variable;\n  }\n  return sum;\n};\n\n/**\n * Interpolates a value from 3 known values (see AA p24 Eq3.3).\n * @param {number} y1 Start value of the interval.\n * @param {number} y2 Middle value of the interval.\n * @param {number} y3 End value of the interval.\n * @param {number} n Location (-0.5 >= n >= 0.5) of result in the interval.\n * @param {bool} normalize Whether the final result should be normalized.\n * @returns {number} Interpolated result.\n */\nconst interpolateFromThree = function (y1, y2, y3, n, normalize) {\n  let a = y2 - y1;\n  let b = y3 - y2;\n  if (typeof normalize !== 'undefined' && normalize) {\n    if (a < 0) { a += 360; }\n    if (b < 0) { b += 360; }\n  }\n  const c = b - a;\n  const y = y2 + (n / 2) * (a + b + n * c);\n  return y;\n};\n\nexport {deg2rad, rad2deg, sind, cosd, reduceAngle, modulo, polynomial,\n  interpolateFromThree};\n","/**\n * Converts a datetime in UTC to the corresponding Julian Date (see AA p60f).\n * @param {moment} datetime Datetime to be converted.\n * @returns {number} Julian date (fractional number of days since 1 January\n *     4713BC according to the proleptic Julian calendar.\n */\nconst datetimeToJD = function (datetime) {\n  let Y = datetime.year();\n  // Months are zero-indexed\n  let M = datetime.month() + 1;\n  const D = datetime.date() + (datetime.hour() + (datetime.minute() +\n                               datetime.second() / 60) / 60) / 24;\n  if (M < 3) {\n    Y -= 1;\n    M += 12;\n  }\n  const A = Math.floor(Y / 100);\n  // Need a different B if we are before introduction of the Gregorian Calendar\n  const gregorianCutoff = moment('1582-10-15T12:00:00Z');\n  let B = 0;\n  if (datetime.isAfter(gregorianCutoff)) {\n    B = 2 - A + Math.floor(A / 4);\n  }\n  const JD = Math.floor(365.25 * (Y + 4716)) +\n             Math.floor(30.6001 * (M + 1)) + D + B - 1524.5;\n  return JD;\n};\n\n/**\n * Converts a Julian Date to the corresponding datetime in UTC (see AA p63).\n * @param {number} JD Julian date to be converted\n * @returns {moment} Datetime corresponding to the given Julian date.\n */\nconst JDToDatetime = function (JD) {\n  JD += 0.5;\n  const Z = Math.floor(JD);\n  const F = JD - Z;\n  let A = Z;\n  if (Z >= 2299161) {\n    const alpha = Math.floor((Z - 1867216.25) / 36524.25);\n    A += 1 + alpha - Math.floor(alpha / 4);\n  }\n  const B = A + 1524;\n  const C = Math.floor((B - 122.1) / 365.25);\n  const D = Math.floor(365.25 * C);\n  const E = Math.floor((B - D) / 30.6001);\n  const fracDay = B - D - Math.floor(30.6001 * E) + F;\n  const day = Math.floor(fracDay);\n  const hours = Math.floor((fracDay - day) * 24);\n  const minutes = Math.floor(((fracDay - day) * 24 - hours) * 60);\n  const seconds =\n    Math.floor((((fracDay - day) * 24 - hours) * 60 - minutes) * 60);\n  let month = E - 1;\n  if (E > 13) {\n    month -= 12;\n  }\n  let year = C - 4715;\n  if (month > 2) {\n    year -= 1;\n  }\n  const datetime = moment.tz('2000-01-01T12:00:00', 'UTC');\n  datetime.year(year);\n  // Months are zero-indexed\n  datetime.month(month - 1);\n  datetime.date(day);\n  datetime.hour(hours);\n  datetime.minute(minutes);\n  datetime.second(seconds);\n  return datetime;\n};\n\n/**\n * Converts a Julian date to the number of Julian centuries since\n * 2000-01-01T12:00:00Z (see AA p87 Eq12.1).\n * @param {number} JD Julian date.\n * @returns {number} T.\n */\nconst JDToT = function (JD) {\n  return (JD - 2451545) / 36525;\n};\n\n/**\n * Converts a datetime in UTC to the number of Julian centuries since\n * 2000-01-01T12:00:00Z.\n * @param {moment} datetime Datetime to be converted.\n * @returns {number} T.\n */\nconst datetimeToT = function (datetime) {\n  return JDToT(datetimeToJD(datetime));\n};\n\n/* eslint-disable complexity */\n/**\n * Calculates the value of ΔT=TT−UT (see\n * http://eclipse.gsfc.nasa.gov/SEcat5/deltatpoly.htm).\n * @param {moment} datetime Datetime for which ΔT should be calculated.\n * @returns {number} ΔT.\n */\nconst DeltaT = function (datetime) {\n  let y = datetime.year();\n  // Months are zero-indexed\n  y += (datetime.month() + 0.5) / 12;\n  let u;\n  let t;\n  let DeltaT;\n  switch (true) {\n    case y < -1999:\n      DeltaT = false;\n      break;\n    case y < -500:\n      u = (y - 1820) / 100;\n      DeltaT = -20 + 32 * u * u;\n      break;\n    case y < 500:\n      u = y / 100;\n      DeltaT = 10583.6 - 1014.41 * u + 33.78311 * u * u - 5.952053 * u * u * u -\n               0.1798452 * u * u * u * u + 0.022174192 * u * u * u * u * u +\n               0.0090316521 * u * u * u * u * u * u;\n      break;\n    case y < 1600:\n      u = (y - 1000) / 100;\n      DeltaT = 1574.2 - 556.01 * u + 71.23472 * u * u + 0.319781 * u * u * u -\n               0.8503463 * u * u * u * u - 0.005050998 * u * u * u * u * u +\n               0.0083572073 * u * u * u * u * u * u;\n      break;\n    case y < 1700:\n      t = y - 1600;\n      DeltaT = 120 - 0.9808 * t - 0.01532 * t * t + t * t * t / 7129;\n      break;\n    case y < 1800:\n      t = y - 1700;\n      DeltaT = 8.83 + 0.1603 * t - 0.0059285 * t * t + 0.00013336 * t * t * t -\n               t * t * t * t / 1174000;\n      break;\n    case y < 1860:\n      t = y - 1800;\n      DeltaT = 13.72 - 0.332447 * t + 0.0068612 * t * t +\n               0.0041116 * t * t * t - 0.00037436 * t * t * t * t +\n               0.0000121272 * t * t * t * t * t -\n               0.0000001699 * t * t * t * t * t * t +\n               0.000000000875 * t * t * t * t * t * t * t;\n      break;\n    case y < 1900:\n      t = y - 1860;\n      DeltaT = 7.62 + 0.5737 * t - 0.251754 * t * t + 0.01680668 * t * t * t -\n               0.0004473624 * t * t * t * t + t * t * t * t * t / 233174;\n      break;\n    case y < 1920:\n      t = y - 1900;\n      DeltaT = -2.79 + 1.494119 * t - 0.0598939 * t * t +\n                0.0061966 * t * t * t - 0.000197 * t * t * t * t;\n      break;\n    case y < 1941:\n      t = y - 1920;\n      DeltaT = 21.20 + 0.84493 * t - 0.076100 * t * t + 0.0020936 * t * t * t;\n      break;\n    case y < 1961:\n      t = y - 1950;\n      DeltaT = 29.07 + 0.407 * t - t * t / 233 + t * t * t / 2547;\n      break;\n    case y < 1986:\n      t = y - 1975;\n      DeltaT = 45.45 + 1.067 * t - t * t / 260 - t * t * t / 718;\n      break;\n    case y < 2005:\n      t = y - 2000;\n      DeltaT = 63.86 + 0.3345 * t - 0.060374 * t * t + 0.0017275 * t * t * t +\n               0.000651814 * t * t * t * t + 0.00002373599 * t * t * t * t * t;\n      break;\n    case y < 2050:\n      t = y - 2000;\n      DeltaT = 62.92 + 0.32217 * t + 0.005589 * t * t;\n      break;\n    case y < 2150:\n      DeltaT = -20 + 32 * ((y - 1820) / 100) * ((y - 1820) / 100) -\n        0.5628 * (2150 - y);\n      break;\n    default:\n      u = (y - 1820) / 100;\n      DeltaT = -20 + 32 * u * u;\n  }\n  return DeltaT;\n};\n/* eslint-enable complexity */\n\n/**\n * Calculates an approximate value for k (the fractional number of new moons\n * since 2000-01-06).\n * @param {moment} datetime Datetime for which k is calculated.\n * @returns {number} k.\n */\nconst approxK = function (datetime) {\n  const year = datetime.year() + (datetime.month() + 1) / 12 +\n    datetime.date() / 365.25;\n  return (year - 2000) * 12.3685;\n};\n\n/**\n * Calculates T from k.\n * @param {number} k Fractional number of new moons since 2000-01-06.\n * @returns {number} T Fractional num. of centuries since 2000-01-01:12:00:00Z.\n */\nconst kToT = function (k) {\n  return k / 1236.85;\n};\n\nexport {datetimeToJD, JDToDatetime, JDToT, datetimeToT, DeltaT, approxK, kToT};\n","import * as auxMath from './auxMath.js';\nimport * as timeConversions from './timeConversions.js';\n\n/**\n * Calculates the Julian date in ephemeris time of the moon near the date\n * corresponding to k (see AA p350ff).\n * @param {number} k The approximate fractional number of new moons since\n *     2000-01-06.\n * @param {int} phase 0 -> new moon, 1 -> first quarter,\n *                    2 -> full moon, 3 -> last quarter.\n * @returns {number} Julian date in ephemeris time of the moon of given phase.\n */\nconst truePhase = function (k, phase) {\n  k += phase / 4;\n  const T = timeConversions.kToT(k);\n  const E = eccentricityCorrection(T);\n  let JDE = meanPhase(T, k);\n  const M = sunMeanAnomaly(T, k);\n  const MPrime = moonMeanAnomaly(T, k);\n  const F = moonArgumentOfLatitude(T, k);\n  const Omega = moonAscendingNodeLongitude(T, k);\n  const A = planetaryArguments(T, k);\n  let DeltaJDE = 0;\n  if (phase === 0 || phase === 2) {\n    DeltaJDE += newMoonFullMoonCorrections(E, M, MPrime, F, Omega, phase);\n  } else if (phase === 1 || phase === 3) {\n    DeltaJDE += quarterCorrections(E, M, MPrime, F, Omega, phase);\n  }\n  DeltaJDE += commonCorrections(A);\n  JDE += DeltaJDE;\n  return JDE;\n};\n\n/**\n * Calculates the mean phase of the moon as Julian date in ephemeris time (see\n * AA p349 Eq49.1).\n * @param {number} T Fractional number of Julian centuries since\n *     2000-01-01T12:00:00Z.\n * @param {number} k The approximate fractional number of new moons since\n *     2000-01-06.\n * @returns {number} Julian date in ephemeris time of the moon of given mean\n *     phase.\n */\nconst meanPhase = function (T, k) {\n  const JDE = 2451550.09766 + 29.530588861 * k + 0.00015437 * T * T -\n              0.000000150 * T * T * T + 0.00000000073 * T * T * T * T;\n  return JDE;\n};\n\n/**\n * Calculates the mean anomaly of the sun (see AA p350 Eq49.4).\n * @param {number} T Fractional number of Julian centuries since\n *     2000-01-01T12:00:00Z.\n * @param {number} k The approximate fractional number of new moons since\n *     2000-01-06.\n * @returns {number} Mean anomaly of the sun at the given time.\n */\nconst sunMeanAnomaly = function (T, k) {\n  const M = 2.5534 + 29.10535670 * k - 0.0000014 * T * T -\n            0.00000011 * T * T * T;\n  return M;\n};\n\n/**\n * Calculates the mean anomaly of the moon (see AA p350 Eq49.5).\n * @param {number} T Fractional number of Julian centuries since\n *     2000-01-01T12:00:00Z.\n * @param {number} k The approximate fractional number of new moons since\n *     2000-01-06.\n * @returns {number} Mean anomaly of the moon at the given time.\n */\nconst moonMeanAnomaly = function (T, k) {\n  const MPrime = 201.5643 + 385.81693528 * k + 0.0107582 * T * T +\n                 0.00001238 * T * T * T - 0.000000058 * T * T * T * T;\n  return MPrime;\n};\n\n/**\n * Calculates the argument of latitude of the moon (see AA p350 Eq49.6).\n * @param {number} T Fractional number of Julian centuries since\n *     2000-01-01T12:00:00Z.\n * @param {number} k The approximate fractional number of new moons since\n *     2000-01-06.\n * @returns {number} Argument of latitude of the moon at the given time.\n */\nconst moonArgumentOfLatitude = function (T, k) {\n  const F = 160.7108 + 390.67050284 * k - 0.0016118 * T * T -\n            0.00000227 * T * T * T + 0.000000011 * T * T * T * T;\n  return F;\n};\n\n/**\n * Calculates the longitude of the ascending node of the lunar orbit (see AA\n * p350 Eq49.7).\n * @param {number} T Fractional number of Julian centuries since\n *     2000-01-01T12:00:00Z.\n * @param {number} k The approximate fractional number of new moons since\n *     2000-01-06.\n * @returns {number} Longitude of the ascending node of the lunar orbit at the\n *     given time.\n */\nconst moonAscendingNodeLongitude = function (T, k) {\n  const Omega = 124.7746 - 1.56375588 * k + 0.0020672 * T * T +\n                0.00000215 * T * T * T;\n  return Omega;\n};\n\n/**\n * Calculates the correction for the eccentricity of the earth's orbit.\n * @param {number} T Fractional number of Julian centuries since\n *     2000-01-01T12:00:00Z.\n * @returns {number} Eccentricity correction.\n */\nconst eccentricityCorrection = function (T) {\n  const E = 1 - 0.002516 * T - 0.0000074 * T * T;\n  return E;\n};\n\n/**\n * Calculates the planetary arguments for the moon phases (see AA p351).\n * @param {number} T Fractional number of Julian centuries since\n *     2000-01-01T12:00:00Z.\n * @param {number} k The approximate fractional number of new moons since\n *     2000-01-06.\n * @returns {array} Planetary arguments for the moon phases.\n */\nconst planetaryArguments = function (T, k) {\n  const A = [];\n  /* eslint-disable no-multi-spaces */\n  // Want to follow the numbering conventions from AA\n  A[0]  = 0;\n  A[1]  = 299.77 +  0.107408 * k - 0.009173 * T * T;\n  A[2]  = 251.88 +  0.016321 * k;\n  A[3]  = 251.83 + 26.651886 * k;\n  A[4]  = 349.42 + 36.412478 * k;\n  A[5]  =  84.66 + 18.206239 * k;\n  A[6]  = 141.74 + 53.303771 * k;\n  A[7]  = 207.14 +  2.453732 * k;\n  A[8]  = 154.84 +  7.306860 * k;\n  A[9]  =  34.52 + 27.261239 * k;\n  A[10] = 207.19 +  0.121824 * k;\n  A[11] = 291.34 +  1.844379 * k;\n  A[12] = 161.72 + 24.198154 * k;\n  A[13] = 239.56 + 25.513099 * k;\n  A[14] = 331.55 +  3.592518 * k;\n  /* eslint-enable no-multi-spaces */\n  return A;\n};\n\n/**\n * Calculates the corrections to the planetary arguments for the moon phases\n * that are common to all phases (see AA p352).\n * @param {array} A Array of planetary arguments\n * @returns {number} Correction to the Julian date in ephemeris time for the\n *     moon phase.\n */\nconst commonCorrections = function (A) {\n  const DeltaJDE = 0.000325 * auxMath.sind(A[1]) +\n                   0.000165 * auxMath.sind(A[2]) +\n                   0.000164 * auxMath.sind(A[3]) +\n                   0.000126 * auxMath.sind(A[4]) +\n                   0.000110 * auxMath.sind(A[5]) +\n                   0.000062 * auxMath.sind(A[6]) +\n                   0.000060 * auxMath.sind(A[7]) +\n                   0.000056 * auxMath.sind(A[8]) +\n                   0.000047 * auxMath.sind(A[9]) +\n                   0.000042 * auxMath.sind(A[10]) +\n                   0.000040 * auxMath.sind(A[11]) +\n                   0.000037 * auxMath.sind(A[12]) +\n                   0.000035 * auxMath.sind(A[13]) +\n                   0.000023 * auxMath.sind(A[14]);\n  return DeltaJDE;\n};\n\n/**\n * Calculates the corrections to the planetary arguments for the moon phases\n * for full and new moons (see AA p351).\n * @param {number} E Correction for the eccentricity of the earth's orbit.\n * @param {number} M Mean anomaly of the sun.\n * @param {number} MPrime Mean anomaly of the moon.\n * @param {number} F Argument of latitude of the moon.\n * @param {number} Omega Longitude of the ascending node of the lunar orbit.\n * @param {int} phase 0 -> new moon, 1 -> first quarter,\n *                    2 -> full moon, 3 -> last quarter.\n * @returns {number} Correction to the Julian date in ephemeris time for the\n *     moon phase.\n */\nconst newMoonFullMoonCorrections = function (E, M, MPrime, F, Omega, phase) {\n  let DeltaJDE = -0.00111 * auxMath.sind(MPrime - 2 * F) -\n                  0.00057 * auxMath.sind(MPrime + 2 * F) +\n                  0.00056 * E * auxMath.sind(2 * MPrime + M) -\n                  0.00042 * auxMath.sind(3 * MPrime) +\n                  0.00042 * E * auxMath.sind(M + 2 * F) +\n                  0.00038 * E * auxMath.sind(M - 2 * F) -\n                  0.00024 * E * auxMath.sind(2 * MPrime - M) -\n                  0.00017 * auxMath.sind(Omega) -\n                  0.00007 * auxMath.sind(MPrime + 2 * M) +\n                  0.00004 * auxMath.sind(2 * MPrime - 2 * F) +\n                  0.00004 * auxMath.sind(3 * M) +\n                  0.00003 * auxMath.sind(MPrime + M - 2 * F) +\n                  0.00003 * auxMath.sind(2 * MPrime + 2 * F) -\n                  0.00003 * auxMath.sind(MPrime + M + 2 * F) +\n                  0.00003 * auxMath.sind(MPrime - M + 2 * F) -\n                  0.00002 * auxMath.sind(MPrime - M - 2 * F) -\n                  0.00002 * auxMath.sind(3 * MPrime + M) +\n                  0.00002 * auxMath.sind(4 * MPrime);\n  if (phase === 0) {\n    DeltaJDE += -0.40720 * auxMath.sind(MPrime) +\n                 0.17241 * E * auxMath.sind(M) +\n                 0.01608 * auxMath.sind(2 * MPrime) +\n                 0.01039 * auxMath.sind(2 * F) +\n                 0.00739 * E * auxMath.sind(MPrime - M) -\n                 0.00514 * E * auxMath.sind(MPrime + M) +\n                 0.00208 * E * E * auxMath.sind(2 * M);\n  } else if (phase === 2) {\n    DeltaJDE += -0.40614 * auxMath.sind(MPrime) +\n                 0.17302 * E * auxMath.sind(M) +\n                 0.01614 * auxMath.sind(2 * MPrime) +\n                 0.01043 * auxMath.sind(2 * F) +\n                 0.00734 * E * auxMath.sind(MPrime - M) -\n                 0.00515 * E * auxMath.sind(MPrime + M) +\n                 0.00209 * E * E * auxMath.sind(2 * M);\n  }\n  return DeltaJDE;\n};\n\n/**\n * Calculates the corrections to the planetary arguments for the moon phases\n * for first and last quarters (see AA p352).\n * @param {number} E Correction for the eccentricity of the earth's orbit.\n * @param {number} M Mean anomaly of the sun.\n * @param {number} MPrime Mean anomaly of the moon.\n * @param {number} F Argument of latitude of the moon.\n * @param {number} Omega Longitude of the ascending node of the lunar orbit.\n * @param {int} phase 0 -> new moon, 1 -> first quarter,\n *                    2 -> full moon, 3 -> last quarter.\n * @returns {number} Correction to the Julian date in ephemeris time for the\n *     moon phase.\n */\nconst quarterCorrections = function (E, M, MPrime, F, Omega, phase) {\n  let DeltaJDE = -0.62801 * auxMath.sind(MPrime) +\n                  0.17172 * E * auxMath.sind(M) -\n                  0.01183 * E * auxMath.sind(MPrime + M) +\n                  0.00862 * auxMath.sind(2 * MPrime) +\n                  0.00804 * auxMath.sind(2 * F) +\n                  0.00454 * E * auxMath.sind(MPrime - M) +\n                  0.00204 * E * E * auxMath.sind(2 * M) -\n                  0.00180 * auxMath.sind(MPrime - 2 * F) -\n                  0.00070 * auxMath.sind(MPrime + 2 * F) -\n                  0.00040 * auxMath.sind(3 * MPrime) -\n                  0.00034 * E * auxMath.sind(2 * MPrime - M) +\n                  0.00032 * E * auxMath.sind(M + 2 * F) +\n                  0.00032 * E * auxMath.sind(M - 2 * F) -\n                  0.00028 * E * E * auxMath.sind(MPrime + 2 * M) +\n                  0.00027 * E * auxMath.sind(2 * MPrime + M) -\n                  0.00017 * auxMath.sind(Omega) -\n                  0.00005 * auxMath.sind(MPrime - M - 2 * F) +\n                  0.00004 * auxMath.sind(2 * MPrime + 2 * F) -\n                  0.00004 * auxMath.sind(MPrime + M + 2 * F) +\n                  0.00004 * auxMath.sind(MPrime - 2 * M) +\n                  0.00003 * auxMath.sind(MPrime + M - 2 * F) +\n                  0.00003 * auxMath.sind(3 * M) +\n                  0.00002 * auxMath.sind(2 * MPrime - 2 * F) +\n                  0.00002 * auxMath.sind(MPrime - M + 2 * F) -\n                  0.00002 * auxMath.sind(3 * MPrime + M);\n  const W = 0.00306 -\n            0.00038 * E * auxMath.cosd(M) +\n            0.00026 * auxMath.cosd(MPrime) -\n            0.00002 * auxMath.cosd(MPrime - M) +\n            0.00002 * auxMath.cosd(MPrime + M) +\n            0.00002 * auxMath.cosd(2 * F);\n  if (phase === 1) {\n    DeltaJDE += W;\n  } else if (phase === 3) {\n    DeltaJDE -= W;\n  }\n  return DeltaJDE;\n};\n\nexport {truePhase};\n","/* eslint array-bracket-spacing: \"off\", indent: \"off\", no-multi-spaces: \"off\", standard/array-bracket-even-spacing: \"off\" */\n\n/** See AA p144 */\nconst sunMeanAnomaly = [357.52772, 35999.050340, -0.0001603, -1 / 300000];\n\n/** See AA p163 Eq 25.2 */\nconst sunMeanLongitude = [280.46646, 36000.76983, 0.0003032];\n\n/** See AA p147 Eq22.3 */\nconst meanObliquityOfEcliptic =\n  [84381.448 / 3600, -4680.93 / 3600, -1.55 / 3600, 1999.25 / 3600,\n   -51.38 / 3600, -249.67 / 3600, -39.05 / 3600, 7.12 / 3600, 27.87 / 3600,\n   5.79 / 3600, 2.45 / 3600];\n\n/** See AA p144 */\nconst moonArgumentOfLatitude =\n  [93.27191, 483202.017538, -0.0036825, 1 / 327270];\n\n/** See AA p144 */\nconst moonAscendingNodeLongitude =\n  [125.04452, -1934.136261, 0.0020708, 1 / 450000];\n\n/** See AA p144 */\nconst moonMeanAnomaly = [134.96298, 477198.867398, 0.0086972, 1 / 56250];\n\n/** See AA p144 */\nconst moonMeanElongation = [297.85036, 445267.111480, -0.0019142, 1 / 189474];\n\n/**\n * Nutations in longitude and obliquity\n * See AA p145f\n */\nconst nutations =\n  [[ 0,  0,  0,  0, 1, -171996, -174.2, 92025,  8.9],\n   [-2,  0,  0,  2, 2,  -13187,   -1.6,  5736, -3.1],\n   [ 0,  0,  0,  2, 2,   -2274,   -0.2,   977, -0.5],\n   [ 0,  0,  0,  0, 2,    2062,    0.2,  -895,  0.5],\n   [ 0,  1,  0,  0, 0,    1426,   -3.4,    54, -0.1],\n   [ 0,  0,  1,  0, 0,     712,    0.1,    -7,    0],\n   [-2,  1,  0,  2, 2,    -517,    1.2,   224, -0.6],\n   [ 0,  0,  0,  2, 1,    -386,   -0.4,   200,    0],\n   [ 0,  0,  1,  2, 2,    -301,      0,   129, -0.1],\n   [-2, -1,  0,  2, 2,     217,   -0.5,   -95,  0.3],\n   [-2,  0,  1,  0, 0,    -158,      0,     0,    0],\n   [-2,  0,  0,  2, 1,     129,    0.1,   -70,    0],\n   [ 0,  0, -1,  2, 2,     123,      0,   -53,    0],\n   [ 2,  0,  0,  0, 0,      63,      0,     0,    0],\n   [ 0,  0,  1,  0, 1,      63,    0.1,   -33,    0],\n   [ 2,  0, -1,  2, 2,     -59,      0,    26,    0],\n   [ 0,  0, -1,  0, 1,     -58,   -0.1,    32,    0],\n   [ 0,  0,  1,  2, 1,     -51,      0,    27,    0],\n   [-2,  0,  2,  0, 0,      48,      0,     0,    0],\n   [ 0,  0, -2,  2, 1,      46,      0,   -24,    0],\n   [ 2,  0,  0,  2, 2,     -38,      0,    16,    0],\n   [ 0,  0,  2,  2, 2,     -31,      0,    13,    0],\n   [ 0,  0,  2,  0, 0,      29,      0,     0,    0],\n   [-2,  0,  1,  2, 2,      29,      0,   -12,    0],\n   [ 0,  0,  0,  2, 0,      26,      0,     0,    0],\n   [-2,  0,  0,  2, 0,     -22,      0,     0,    0],\n   [ 0,  0, -1,  2, 1,      21,      0,   -10,    0],\n   [ 0,  2,  0,  0, 0,      17,   -0.1,     0,    0],\n   [ 2,  0, -1,  0, 1,      16,      0,    -8,    0],\n   [-2,  2,  0,  2, 2,     -16,    0.1,     7,    0],\n   [ 0,  1,  0,  0, 1,     -15,      0,     9,    0],\n   [-2,  0,  1,  0, 1,     -13,      0,     7,    0],\n   [ 0, -1,  0,  0, 1,     -12,      0,     6,    0],\n   [ 0,  0,  2, -2, 0,      11,      0,     0,    0],\n   [ 2,  0, -1,  2, 1,     -10,      0,     5,    0],\n   [ 2,  0,  1,  2, 2,     -8,       0,     3,    0],\n   [ 0,  1,  0,  2, 2,      7,       0,    -3,    0],\n   [-2,  1,  1,  0, 0,     -7,       0,     0,    0],\n   [ 0, -1,  0,  2, 2,     -7,       0,     3,    0],\n   [ 2,  0,  0,  2, 1,     -7,       0,     3,    0],\n   [ 2,  0,  1,  0, 0,      6,       0,     0,    0],\n   [-2,  0,  2,  2, 2,      6,       0,    -3,    0],\n   [-2,  0,  1,  2, 1,      6,       0,    -3,    0],\n   [ 2,  0, -2,  0, 1,     -6,       0,     3,    0],\n   [ 2,  0,  0,  0, 1,     -6,       0,     3,    0],\n   [ 0, -1,  1,  0, 0,      5,       0,     0,    0],\n   [-2, -1,  0,  2, 1,     -5,       0,     3,    0],\n   [-2,  0,  0,  0, 1,     -5,       0,     3,    0],\n   [ 0,  0,  2,  2, 1,     -5,       0,     3,    0],\n   [-2,  0,  2,  0, 1,      4,       0,     0,    0],\n   [-2,  1,  0,  2, 1,      4,       0,     0,    0],\n   [ 0,  0,  1, -2, 0,      4,       0,     0,    0],\n   [-1,  0,  1,  0, 0,     -4,       0,     0,    0],\n   [-2,  1,  0,  0, 0,     -4,       0,     0,    0],\n   [ 1,  0,  0,  0, 0,     -4,       0,     0,    0],\n   [ 0,  0,  1,  2, 0,      3,       0,     0,    0],\n   [ 0,  0, -2,  2, 2,     -3,       0,     0,    0],\n   [-1, -1,  1,  0, 0,     -3,       0,     0,    0],\n   [ 0,  1,  1,  0, 0,     -3,       0,     0,    0],\n   [ 0, -1,  1,  2, 2,     -3,       0,     0,    0],\n   [ 2, -1, -1,  2, 2,     -3,       0,     0,    0],\n   [ 0,  0,  3,  2, 2,      3,       0,     0,    0],\n   [ 2, -1,  0,  2, 2,     -3,       0,     0,    0]];\n\nexport {sunMeanAnomaly, sunMeanLongitude, meanObliquityOfEcliptic,\n  moonArgumentOfLatitude, moonAscendingNodeLongitude, moonMeanAnomaly,\n  moonMeanElongation, nutations};\n","import * as auxMath from './auxMath.js';\nimport * as constants from './constants.js';\nimport * as timeConversions from './timeConversions.js';\nimport {returnTimeForPNMS, roundToNearestMinute} from './index.js';\n\n/**\n * Calculates the solar transit time on a date at a given longitude (see AA\n * p102f).\n * @param {moment} datetime Date for which transit is calculated.\n * @param {number} L Longitude.\n * @returns {moment} Solar transit time.\n */\nconst sunTransit = function (datetime, L) {\n  const timezone = datetime.tz();\n  const transit = moment.tz(\n    [datetime.year(), datetime.month(), datetime.date(), 0, 0, 0], 'UTC');\n  const DeltaT = timeConversions.DeltaT(transit);\n  const T = timeConversions.datetimeToT(transit);\n  const Theta0 = apparentSiderealTimeGreenwhich(T);\n  // Want 0h TD for this, not UT\n  const TD = T - (DeltaT / (3600 * 24 * 36525));\n  const alpha = sunApparentRightAscension(TD);\n  // Sign flip for longitude from AA as we take East as positive\n  let m = (alpha - L - Theta0) / 360;\n  m = normalizeM(m, datetime.utcOffset());\n  const DeltaM = sunTransitCorrection(T, Theta0, DeltaT, L, m);\n  m += DeltaM;\n  transit.add(Math.floor(m * 3600 * 24 + 0.5), 'seconds');\n  if (roundToNearestMinute) {\n    transit.add(30, 'seconds');\n    transit.second(0);\n  }\n  transit.tz(timezone);\n  return transit;\n};\n\n/**\n * Calculates the sunrise or sunset time on a date at a given latitude and\n * longitude (see AA p102f).\n * @param {moment} datetime Date for which sunrise or sunset is calculated.\n * @param {number} phi Latitude.\n * @param {number} L Longitude.\n * @param {string} flag 'RISE' or 'SET' depending on which event should be\n *     calculated.\n * @returns {moment} Sunrise or sunset time.\n */\nconst sunRiseSet = function (datetime, phi, L, flag) {\n  const timezone = datetime.tz();\n  const suntime = moment.tz(\n    [datetime.year(), datetime.month(), datetime.date(), 0, 0, 0], 'UTC');\n  const DeltaT = timeConversions.DeltaT(suntime);\n  const T = timeConversions.datetimeToT(suntime);\n  const Theta0 = apparentSiderealTimeGreenwhich(T);\n  // Want 0h TD for this, not UT\n  const TD = T - (DeltaT / (3600 * 24 * 36525));\n  const alpha = sunApparentRightAscension(TD);\n  const delta = sunApparentDeclination(TD);\n  const H0 = approxLocalHourAngle(phi, delta);\n  // Sign flip for longitude from AA as we take East as positive\n  let m0 = (alpha - L - Theta0) / 360;\n  m0 = normalizeM(m0, datetime.utcOffset());\n  let m;\n  if (flag === 'RISE') {\n    m = m0 - H0 / 360;\n  } else if (flag === 'SET') {\n    m = m0 + H0 / 360;\n  } else {\n    return false;\n  }\n  let counter = 0;\n  let DeltaM = 1;\n  // Repeat if correction is larger than ~9s\n  while ((Math.abs(DeltaM) > 0.0001) && (counter < 3)) {\n    DeltaM = sunRiseSetCorrection(T, Theta0, DeltaT, phi, L, m);\n    m += DeltaM;\n    counter++;\n  }\n  if (m > 0) {\n    suntime.add(Math.floor(m * 3600 * 24 + 0.5), 'seconds');\n  } else {\n    suntime.subtract(Math.floor(Math.abs(m) * 3600 * 24 + 0.5), 'seconds');\n  }\n  if (roundToNearestMinute) {\n    suntime.add(30, 'seconds');\n    suntime.second(0);\n  }\n  suntime.tz(timezone);\n  return suntime;\n};\n\n/**\n * Returns 06:00/18:00 (07:00/19:00 during DST) if there is no sunrise or sunset\n * on the date. If returnTimeForPNMS is true, otherwise return whether there is\n * Polar Night or Midnight Sun.\n * @param {moment} returnDate The calculated time for sunrise or sunset.\n * @param {moment} date The original date from which the event was calculated.\n * @param {int} hour Hour to which the returned datetime should be set.\n * @returns {(moment|string)} Time given by parameter 'hour' (+ correction for\n *     DST if applicable) or a string indicating that the location experiences\n *     midnight sun ('MS') or polar night ('PN') on that date.\n */\nconst returnPNMS = function (returnDate, date, hour) {\n  if (returnTimeForPNMS) {\n    if (date.isDST()) {\n      hour += 1;\n    }\n    returnDate.tz(date.tz())\n      .year(date.year())\n      .month(date.month())\n      .date(date.date())\n      .hour(hour)\n      .minute(0)\n      .second(0);\n  }\n  return returnDate;\n};\n\n/**\n * Calculates the approximate local hour angle of the sun at sunrise or sunset.\n * @param {number} phi Latitude (see AA p102 Eq15.1).\n * @param {number} delta Apparent declination of the sun.\n * @returns {number} Approximate local hour angle.\n */\nconst approxLocalHourAngle = function (phi, delta) {\n  const cosH0 = (auxMath.sind(-50 / 60) -\n                auxMath.sind(phi) * auxMath.sind(delta)) /\n                (auxMath.cosd(phi) * auxMath.cosd(delta));\n  if (cosH0 < -1) {\n    if (returnTimeForPNMS) {\n      throw moment.tz('**2000-01-01 12:00:00', 'YYYY-MM-DD HH:mm:ss',\n        'Europe/London');\n    } else {\n      throw 'MS';\n    }\n  } else if (cosH0 > 1) {\n    if (returnTimeForPNMS) {\n      throw moment.tz('--2000-01-01 12:00:00', 'YYYY-MM-DD HH:mm:ss',\n        'Europe/London');\n    } else {\n      throw 'PN';\n    }\n  }\n  const H0 = auxMath.rad2deg(Math.acos(cosH0));\n  return H0;\n};\n\n/**\n * Normalizes a fractional time of day to be on the correct date.\n * @param {number} m Fractional time of day\n * @param {int} utcOffset Offset in minutes from UTC.\n * @returns {number} m Normalized m.\n */\nconst normalizeM = function (m, utcOffset) {\n  const localM = m + utcOffset / 1440;\n  if (localM < 0) {\n    return m + 1;\n  } else if (localM > 1) {\n    return m - 1;\n  }\n  return m;\n};\n\n/**\n * Calculates the correction for the solar transit time (see AA p103).\n * @param {number} T Fractional number of Julian centuries since\n *     2000-01-01T12:00:00Z.\n * @param {number} Theta0 Apparent sidereal time at Greenwhich.\n * @param {number} DeltaT ΔT = TT − UT.\n * @param {number} L Longitude.\n * @param {number} m Fractional time of day of the event.\n * @returns {number} Currection for the solar transit time.\n */\nconst sunTransitCorrection = function (T, Theta0, DeltaT, L, m) {\n  const theta0 = Theta0 + 360.985647 * m;\n  const n = m + DeltaT / 864000;\n  const alpha = interpolatedRa(T, n);\n  const H = localHourAngle(theta0, L, alpha);\n  const DeltaM = -H / 360;\n  return DeltaM;\n};\n\n/**\n * Calculates the correction for the sunrise/sunset time (see AA p103).\n * @param {number} T Fractional number of Julian centuries since\n *     2000-01-01T12:00:00Z.\n * @param {number} Theta0 Apparent sidereal time at Greenwhich.\n * @param {number} DeltaT ΔT = TT − UT.\n * @param {number} phi Latitude.\n * @param {number} L Longitude.\n * @param {number} m Fractional time of day of the event.\n * @returns {number} Currection for the sunrise/sunset time.\n */\nconst sunRiseSetCorrection = function (T, Theta0, DeltaT, phi, L, m) {\n  const theta0 = Theta0 + 360.985647 * m;\n  const n = m + DeltaT / 864000;\n  const alpha = interpolatedRa(T, n);\n  const delta = interpolatedDec(T, n);\n  const H = localHourAngle(theta0, L, alpha);\n  const h = altitude(phi, delta, H);\n  const DeltaM = (h + 50 / 60) /\n    (360 * auxMath.cosd(delta) * auxMath.cosd(phi) * auxMath.sind(H));\n  return DeltaM;\n};\n\n/**\n * Calculates the local hour angle of the sun (see AA p103).\n * @param {number} theta0 Sidereal time at Greenwhich in degrees.\n * @param {number} L Longitude.\n * @param {number} alpha Apparent right ascension of the sun.\n * @returns {number} Local hour angle of the sun.\n */\nconst localHourAngle = function (theta0, L, alpha) {\n  // Signflip for longitude\n  let H = auxMath.reduceAngle(theta0 + L - alpha);\n  if (H > 180) { H -= 360; }\n  return H;\n};\n\n/**\n * Calculates the altitude of the sun above the horizon (see AA P93 Eq13.6).\n * @param {number} phi Latitude.\n * @param {number} delta Apparent declination of the sun.\n * @param {number} H Local hour angle of the sun.\n * @returns {number} Altitude of the sun above the horizon.\n */\nconst altitude = function (phi, delta, H) {\n  const h = auxMath.rad2deg(Math.asin(\n    auxMath.sind(phi) * auxMath.sind(delta) +\n    auxMath.cosd(phi) * auxMath.cosd(delta) * auxMath.cosd(H)));\n  return h;\n};\n\n/**\n * Interpolates the sun's right ascension (see AA p103).\n * @param {number} T Fractional number of Julian centuries since\n *     2000-01-01T12:00:00Z.\n * @param {number} n Fractional time of day of the event corrected by ΔT.\n * @returns {number} Interpolated right ascension.\n */\nconst interpolatedRa = function (T, n) {\n  const alpha1 = sunApparentRightAscension(T - (1 / 36525));\n  const alpha2 = sunApparentRightAscension(T);\n  const alpha3 = sunApparentRightAscension(T + (1 / 36525));\n  // I don't understand why the RA has to be interpolated with normalization\n  // but the Dec without, but the returned values are wrong otherwise...\n  const alpha = auxMath.interpolateFromThree(alpha1, alpha2, alpha3, n, true);\n  return auxMath.reduceAngle(alpha);\n};\n\n/**\n * Interpolates the sun's declination (see AA p103).\n * @param {number} T Fractional number of Julian centuries since\n *     2000-01-01T12:00:00Z.\n * @param {number} n Fractional time of day of the event corrected by ΔT.\n * @returns {number} Interpolated declination.\n */\nconst interpolatedDec = function (T, n) {\n  const delta1 = sunApparentDeclination(T - (1 / 36525));\n  const delta2 = sunApparentDeclination(T);\n  const delta3 = sunApparentDeclination(T + (1 / 36525));\n  const delta = auxMath.interpolateFromThree(delta1, delta2, delta3, n);\n  return auxMath.reduceAngle(delta);\n};\n\n/**\n * Calculates the apparent right ascension of the sun (see AA p165 Eq25.6).\n * @param {number} T Fractional number of Julian centuries since\n *     2000-01-01T12:00:00Z.\n * @returns {number} Apparent right ascension of the sun.\n */\nconst sunApparentRightAscension = function (T) {\n  const Omega = moonAscendingNodeLongitude(T);\n  const epsilon = trueObliquityOfEcliptic(T) +\n                  0.00256 * auxMath.cosd(Omega);\n  const lambda = sunApparentLongitude(T);\n  const alpha = auxMath.rad2deg(Math.atan2(\n    auxMath.cosd(epsilon) * auxMath.sind(lambda), auxMath.cosd(lambda)));\n  return auxMath.reduceAngle(alpha);\n};\n\n/**\n * Calculates the apparent declination of the sun (see AA p165 Eq25.7).\n * @param {number} T Fractional number of Julian centuries since\n *     2000-01-01T12:00:00Z.\n * @returns {number} Apparent declination of the sun.\n */\nconst sunApparentDeclination = function (T) {\n  const Omega = moonAscendingNodeLongitude(T);\n  const epsilon = trueObliquityOfEcliptic(T) +\n                  0.00256 * auxMath.cosd(Omega);\n  const lambda = sunApparentLongitude(T);\n  const delta = auxMath.rad2deg(Math.asin(\n    auxMath.sind(epsilon) * auxMath.sind(lambda)));\n  return delta;\n};\n\n/**\n * Calculates the apparent sidereal time at Greenwhich (see AA p88).\n * @param {number} T Fractional number of Julian centuries since\n *     2000-01-01T12:00:00Z.\n * @returns {number} Apparent sidereal time at Greenwhich\n */\nconst apparentSiderealTimeGreenwhich = function (T) {\n  const theta0 = meanSiderealTimeGreenwhich(T);\n  const epsilon = trueObliquityOfEcliptic(T);\n  const DeltaPsi = nutationInLongitude(T);\n  const theta = theta0 + DeltaPsi * auxMath.cosd(epsilon);\n  return auxMath.reduceAngle(theta);\n};\n\n/**\n * Calculates the mean sidereal time at Greenwhich (see AA p88 Eq12.4).\n * @param {number} T Fractional number of Julian centuries since\n *     2000-01-01T12:00:00Z.\n * @returns {number} Mean sidereal time at Greenwhich\n */\nconst meanSiderealTimeGreenwhich = function (T) {\n  const JD2000 = T * 36525;\n  const theta0 = 280.46061837 + 360.98564736629 * JD2000 + 0.000387933 * T * T -\n                 T * T * T / 38710000;\n  return theta0;\n};\n\n/**\n * Calculates the true obliquity of the ecliptic (see AA p147).\n * @param {number} T Fractional number of Julian centuries since\n *     2000-01-01T12:00:00Z.\n * @returns {number} True obliquity of the ecliptic.\n */\nconst trueObliquityOfEcliptic = function (T) {\n  const epsilon0 = meanObliquityOfEcliptic(T);\n  const DeltaEpsilon = nutationInObliquity(T);\n  const epsilon = epsilon0 + DeltaEpsilon;\n  return epsilon;\n};\n\n/**\n * Calculates the mean obliquity of the ecliptic (see AA p147 Eq 22.3).\n * @param {number} T Fractional number of Julian centuries since\n *     2000-01-01T12:00:00Z.\n * @returns {number} Mean obliquity of the ecliptic.\n */\nconst meanObliquityOfEcliptic = function (T) {\n  const U = T / 100;\n  const epsilon0 = auxMath.polynomial(U, constants.meanObliquityOfEcliptic);\n  return epsilon0;\n};\n\n/**\n * Calculates the apparent longitude of the sun (see AA p164).\n * @param {number} T Fractional number of Julian centuries since\n *     2000-01-01T12:00:00Z.\n * @returns {number} Apparent longitude of the sun.\n */\nconst sunApparentLongitude = function (T) {\n  const Sol = sunTrueLongitude(T);\n  const Omega = moonAscendingNodeLongitude(T);\n  const lambda = Sol - 0.00569 - 0.00478 * auxMath.sind(Omega);\n  return lambda;\n};\n\n/**\n * Calculates the true longitude of the sun (see AA p164).\n * @param {number} T Fractional number of Julian centuries since\n *     2000-01-01T12:00:00Z.\n * @returns {number} True longitude of the sun.\n */\nconst sunTrueLongitude = function (T) {\n  const L0 = sunMeanLongitude(T);\n  const C = sunEquationOfCenter(T);\n  const Sol = L0 + C;\n  return Sol;\n};\n\n/**\n * Calculates the equation of center of the sun (see AA p164).\n * @param {number} T Fractional number of Julian centuries since\n *     2000-01-01T12:00:00Z.\n * @returns {number} Equation of center of the sun.\n */\nconst sunEquationOfCenter = function (T) {\n  const M = sunMeanAnomaly(T);\n  const C = (1.914602 - 0.004817 * T - 0.000014 * T * T) * auxMath.sind(M) +\n            (0.019993 - 0.000101 * T) * auxMath.sind(2 * M) +\n            0.000290 * auxMath.sind(3 * M);\n  return C;\n};\n\n/**\n * Calculates the nutation in longitude of the sun (see AA p144ff).\n * @param {number} T Fractional number of Julian centuries since\n *     2000-01-01T12:00:00Z.\n * @returns {number} Nutation in longitude of the sun.\n */\nconst nutationInLongitude = function (T) {\n  const D = moonMeanElongation(T);\n  const M = sunMeanAnomaly(T);\n  const MPrime = moonMeanAnomaly(T);\n  const F = moonArgumentOfLatitude(T);\n  const Omega = moonAscendingNodeLongitude(T);\n  let DeltaPsi = 0;\n  let sineArg;\n  for (let i = 0; i < 63; i++) {\n    sineArg = constants.nutations[i][0] * D +\n              constants.nutations[i][1] * M +\n              constants.nutations[i][2] * MPrime +\n              constants.nutations[i][3] * F +\n              constants.nutations[i][4] * Omega;\n    DeltaPsi += (constants.nutations[i][5] +\n                 constants.nutations[i][6] * T) * auxMath.sind(sineArg);\n  }\n  DeltaPsi /= 36000000;\n  return DeltaPsi;\n};\n\n/**\n * Calculates the nutation in obliquity of the sun (see AA p144ff).\n * @param {number} T Fractional number of Julian centuries since\n *     2000-01-01T12:00:00Z.\n * @returns {number} Nutation in obliquity of the sun.\n */\nconst nutationInObliquity = function (T) {\n  const D = moonMeanElongation(T);\n  const M = sunMeanAnomaly(T);\n  const MPrime = moonMeanAnomaly(T);\n  const F = moonArgumentOfLatitude(T);\n  const Omega = moonAscendingNodeLongitude(T);\n  let DeltaEpsilon = 0;\n  let cosArg;\n  for (let i = 0; i < 63; i++) {\n    cosArg = constants.nutations[i][0] * D +\n             constants.nutations[i][1] * M +\n             constants.nutations[i][2] * MPrime +\n             constants.nutations[i][3] * F +\n             constants.nutations[i][4] * Omega;\n    DeltaEpsilon += (constants.nutations[i][7] +\n                     constants.nutations[i][8] * T) * auxMath.cosd(cosArg);\n  }\n  DeltaEpsilon /= 36000000;\n  return DeltaEpsilon;\n};\n\n/**\n * Calculates the argument of latitude of the moon (see AA p144).\n * @param {number} T Fractional number of Julian centuries since\n *     2000-01-01T12:00:00Z.\n * @returns {number} Argument of latitude of the moon.\n */\nconst moonArgumentOfLatitude = function (T) {\n  const F = auxMath.polynomial(T, constants.moonArgumentOfLatitude);\n  return auxMath.reduceAngle(F);\n};\n\n/**\n * Calculates the longitude of the ascending node of the Moon's mean orbit on\n * the ecliptic, measured from the mean equinox of the datea (see AA p144).\n * @param {number} T Fractional number of Julian centuries since\n *     2000-01-01T12:00:00Z.\n * @returns {number} Longitude of the asc. node of the moon's mean orbit.\n */\nconst moonAscendingNodeLongitude = function (T) {\n  const Omega = auxMath.polynomial(T, constants.moonAscendingNodeLongitude);\n  return auxMath.reduceAngle(Omega);\n};\n\n/**\n * Calculates the mean anomaly of the moon (see AA p144).\n * @param {number} T Fractional number of Julian centuries since\n *     2000-01-01T12:00:00Z.\n * @returns {number} Mean anomaly of the moon.\n */\nconst moonMeanAnomaly = function (T) {\n  const MPrime = auxMath.polynomial(T, constants.moonMeanAnomaly);\n  return auxMath.reduceAngle(MPrime);\n};\n\n/**\n * Calculates the mean elongation of the moon from the sun (see AA p144).\n * @param {number} T Fractional number of Julian centuries since\n *     2000-01-01T12:00:00Z.\n * @returns {number} Mean elongation of the moon from the sun.\n */\nconst moonMeanElongation = function (T) {\n  const D = auxMath.polynomial(T, constants.moonMeanElongation);\n  return auxMath.reduceAngle(D);\n};\n\n/**\n * Calculates the mean anomaly of the sun (see AA p144).\n * @param {number} T Fractional number of Julian centuries since\n *     2000-01-01T12:00:00Z.\n * @returns {number} Mean anomaly of the sun.\n */\nconst sunMeanAnomaly = function (T) {\n  const M = auxMath.polynomial(T, constants.sunMeanAnomaly);\n  return auxMath.reduceAngle(M);\n};\n\n/**\n * Calculates the mean longitude of the sun referred to the mean equinox of the\n * date (see AA p163).\n * @param {number} T Fractional number of Julian centuries since\n *     2000-01-01T12:00:00Z.\n * @returns {number} Mean longitude of the sun referred to the mean equinox of\n *     the date.\n */\nconst sunMeanLongitude = function (T) {\n  const L0 = auxMath.polynomial(T, constants.sunMeanLongitude);\n  return auxMath.reduceAngle(L0);\n};\n\nexport {sunRiseSet, sunTransit, returnPNMS};\n","import * as moonPhases from './moonPhases.js';\nimport * as sunTimes from './sunTimes.js';\nimport * as timeConversions from './timeConversions.js';\n\nlet roundToNearestMinute = false;\nlet returnTimeForPNMS = false;\nlet dateFormatKeys = {'**': '‡', '--': '†'};\n\n/**\n * Sets options (roundToNearestMinute, returnTimeForPNMS, dateFormatKey) for the\n * module.\n * @param {object} options Options to be set.\n */\nconst options = function (options) {\n  if (typeof options.roundToNearestMinute === 'boolean') {\n    roundToNearestMinute = options.roundToNearestMinute;\n  }\n  if (typeof options.returnTimeForPNMS === 'boolean') {\n    returnTimeForPNMS = options.returnTimeForPNMS;\n  }\n  if (typeof options.dateFormatKeys === 'object') {\n    dateFormatKeys = options.dateFormatKeys;\n  }\n};\n\n/**\n * Uses the extra information encoded into the moment object for dates without\n * a sunrise or sunset if returnTimeForPNMS is true to mark the output string.\n * @param {moment} datetime Input datetime.\n * @param {string} formatString Valid moment format string.\n * @returns {string} Formatted string with marker appended.\n */\nconst formatCI = function (datetime, formatString) {\n  const customKey = datetime.creationData().input.slice(0, 2);\n  let datestring = datetime.format(formatString);\n  if (dateFormatKeys[customKey]) {\n    datestring += dateFormatKeys[customKey];\n  }\n  return datestring;\n};\n\n/**\n * Calculates sunrise on the provided date.\n * @param {moment} datetime Datetime for which sunrise is calculated. Should\n *     always contain a timezone or be in UTC, lone UTC offsets might lead to\n *     unexpected behaviour.\n * @param {number} phi Latitude of target location.\n * @param {number} L longitude of target location.\n * @returns {(moment|string)} Time of sunrise or a string indicating that the\n *     location experiences midnight sun ('MS') or polar night ('PN') on that\n *     date (unless returnTimeForPNMS is true).\n */\nconst sunrise = function (datetime, phi, L) {\n  let sunrise;\n  try {\n    sunrise = sunTimes.sunRiseSet(datetime, phi, L, 'RISE');\n  } catch (err) {\n    return sunTimes.returnPNMS(err, datetime, 6);\n  }\n  return sunrise;\n};\n\n/**\n * Calculates sunset on the provided date.\n * @param {moment} datetime Datetime for which sunset is calculated. Should\n *     always contain a timezone or be in UTC, lone UTC offsets might lead to\n *     unexpected behaviour.\n * @param {number} phi Latitude of target location.\n * @param {number} L longitude of target location.\n * @returns {(moment|string)} Time of sunset or a string indicating that the\n *     location experiences midnight sun ('MS') or polar night ('PN') on that\n *     date (unless returnTimeForPNMS is true).\n */\nconst sunset = function (datetime, phi, L) {\n  let sunset;\n  try {\n    sunset = sunTimes.sunRiseSet(datetime, phi, L, 'SET');\n  } catch (err) {\n    return sunTimes.returnPNMS(err, datetime, 18);\n  }\n  return sunset;\n};\n\n/**\n * Calculates solar noon on the provided date.\n * @param {moment} datetime Datetime for which solar noon is calculated. Should\n *     always contain a timezone or be in UTC, lone UTC offsets might lead to\n *     unexpected behaviour.\n * @param {number} L longitude of target location.\n * @returns {moment} Time of solar noon at the given longitude.\n */\nconst solarNoon = function (datetime, L) {\n  const transit = sunTimes.sunTransit(datetime, L);\n  return transit;\n};\n\n/**\n * Calculates all moons of the given phase that occur within the given\n * Gregorian calendar year.\n * @param {int} year Year for which moon phases should be calculated.\n * @param {int} phase 0 -> new moon, 1 -> first quarter,\n *                    2 -> full moon, 3 -> last quarter.\n * @param {string} timezone Optional: IANA timezone string.\n * @returns {array} Array of moment objects for moons of the given phase.\n */\nconst yearMoonPhases = function (year, phase, timezone) {\n  const yearBegin = moment([year]);\n  const yearEnd = moment([year + 1]);\n  // this will give us k for the first new moon of the year or earlier\n  let k = Math.floor(timeConversions.approxK(yearBegin)) - 1;\n  // taking 15 events will make sure we catch every event in the year\n  const phaseTimes = [];\n  let JDE;\n  let moonDatetime;\n  let DeltaT;\n  for (let i = 0; i < 15; i++) {\n    JDE = moonPhases.truePhase(k, phase);\n    // we pretend it's JD and not JDE\n    moonDatetime = timeConversions.JDToDatetime(JDE);\n    // now use that to calculate deltaT\n    DeltaT = timeConversions.DeltaT(moonDatetime);\n    if (DeltaT > 0) {\n      moonDatetime.subtract(Math.abs(DeltaT), 'seconds');\n    } else {\n      moonDatetime.add(Math.abs(DeltaT), 'seconds');\n    }\n    if (roundToNearestMinute) {\n      moonDatetime.add(30, 'seconds');\n      moonDatetime.second(0);\n    }\n    if (typeof timezone === 'undefined') {\n      timezone = 'UTC';\n    }\n    moonDatetime.tz(timezone);\n    if ((moonDatetime.isAfter(yearBegin)) && (moonDatetime.isBefore(yearEnd))) {\n      phaseTimes.push(moonDatetime);\n    }\n    k++;\n  }\n  return phaseTimes;\n};\n\nexport {options, formatCI, sunrise, sunset, solarNoon, yearMoonPhases,\n  roundToNearestMinute, returnTimeForPNMS};\n"],"names":["deg2rad","deg","rad2deg","rad","sind","Math","sin","cosd","cos","reduceAngle","angle","floor","polynomial","variable","coeffs","varPower","sum","numCoeffs","length","i","interpolateFromThree","y1","y2","y3","n","normalize","a","b","JDToDatetime","JD","Z","F","A","alpha","B","C","D","E","fracDay","day","hours","minutes","seconds","month","year","datetime","moment","tz","date","hour","minute","second","datetimeToT","Y","M","gregorianCutoff","isAfter","datetimeToJD","DeltaT","y","u","t","truePhase","k","phase","T","timeConversions","eccentricityCorrection","JDE","meanPhase","sunMeanAnomaly","MPrime","moonMeanAnomaly","moonArgumentOfLatitude","Omega","moonAscendingNodeLongitude","planetaryArguments","DeltaJDE","newMoonFullMoonCorrections","quarterCorrections","commonCorrections","auxMath","W","sunMeanLongitude","meanObliquityOfEcliptic","moonMeanElongation","nutations","sunRiseSet","phi","L","flag","timezone","suntime","Theta0","apparentSiderealTimeGreenwhich","TD","sunApparentRightAscension","delta","sunApparentDeclination","H0","approxLocalHourAngle","m0","normalizeM","utcOffset","m","counter","DeltaM","abs","sunRiseSetCorrection","add","subtract","roundToNearestMinute","returnPNMS","returnDate","returnTimeForPNMS","isDST","cosH0","acos","localM","sunTransitCorrection","theta0","interpolatedRa","localHourAngle","interpolatedDec","H","altitude","asin","alpha1","alpha2","alpha3","delta1","delta2","delta3","epsilon","trueObliquityOfEcliptic","lambda","sunApparentLongitude","atan2","meanSiderealTimeGreenwhich","theta","nutationInLongitude","nutationInObliquity","constants","Sol","sunTrueLongitude","sunEquationOfCenter","DeltaPsi","sineArg","DeltaEpsilon","cosArg","L0","dateFormatKeys","**","--","options","_typeof","formatString","customKey","creationData","input","slice","datestring","format","sunrise","sunTimes","err","sunset","transit","yearBegin","yearEnd","phaseTimes","moonDatetime","moonPhases","isBefore","push"],"mappings":"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"}